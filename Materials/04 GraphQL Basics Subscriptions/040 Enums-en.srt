1
00:00:00,240 --> 00:00:05,760
In this video you're going to learn about the ENM type engraft Q L E Nom's are just another tool in

2
00:00:05,760 --> 00:00:09,180
our tool belt allowing us to better model our application data.

3
00:00:09,250 --> 00:00:14,370
And I actually want to start off with a definition of incomes then move on to some practical examples.

4
00:00:14,370 --> 00:00:17,310
And finally will implemented in our app right here though.

5
00:00:17,310 --> 00:00:23,240
I have a three part definition describing what an income is enough is short for enumeration.

6
00:00:23,250 --> 00:00:27,710
And I just want to read through this definition then we'll go through it again with an example.

7
00:00:27,720 --> 00:00:34,410
So an enum is a special type that defines a set of constants and this type can then be used as the type

8
00:00:34,410 --> 00:00:39,260
for a field similar to how we can use our Scheller and custom types for fields.

9
00:00:39,330 --> 00:00:44,270
And then finally values for that field must be one of the constants for the type.

10
00:00:44,280 --> 00:00:46,450
So let's break this down with an example.

11
00:00:46,500 --> 00:00:49,660
We're going to define a special type and a set of constants.

12
00:00:49,680 --> 00:00:56,010
So if I was trying to represent user roles I might define an ENM called something like user role and

13
00:00:56,010 --> 00:01:00,710
I might list out all of the potential values a user could be a standard user.

14
00:01:00,870 --> 00:01:05,200
You could also be an editor and then maybe lastly you could be an admin.

15
00:01:05,220 --> 00:01:07,590
So those are the three potential roles.

16
00:01:07,650 --> 00:01:11,990
When I was to go to find the user I would then use that as the type for one of the fields.

17
00:01:12,000 --> 00:01:17,900
So right here I'll just leave some comments since I'm not actually writing graphical type user.

18
00:01:17,900 --> 00:01:21,450
We will then set up the closing curly brace.

19
00:01:21,450 --> 00:01:28,290
I'll add a single field role of the type user role and now we're essentially enforcing that the value

20
00:01:28,290 --> 00:01:33,660
for roll is one of these three values that cannot be anything else.

21
00:01:33,690 --> 00:01:37,810
So let's go ahead and work through just one more example before we see this in practice.

22
00:01:37,830 --> 00:01:41,610
Let's say we're using graft well to model a laptop.

23
00:01:41,610 --> 00:01:46,740
If I was modeling a laptop I would likely want some field that allows me to represent whether or not

24
00:01:46,740 --> 00:01:48,360
the laptop is powered on.

25
00:01:48,540 --> 00:01:54,510
So I might have an is on field or is powered on and this could be of the Boolean type so I could set

26
00:01:54,510 --> 00:01:57,290
it equal to true if the laptop is on or false.

27
00:01:57,300 --> 00:02:03,330
If the laptop is off now this is a good start but it's not actually representative of all of the various

28
00:02:03,330 --> 00:02:06,040
states that a laptop's power can be in.

29
00:02:06,060 --> 00:02:11,520
You can have a laptop powered on you could have a laptop powered off but you can also have a laptop

30
00:02:11,520 --> 00:02:12,910
that's in sleep mode.

31
00:02:12,960 --> 00:02:18,780
So a boolean no longer really serves us since it can only represent two states and ENM can represent

32
00:02:18,780 --> 00:02:22,660
as many states as we need and we can actually enforce that it's one of those.

33
00:02:22,680 --> 00:02:30,450
So in reality we would probably have a laptop field called something like power status of an enim type.

34
00:02:30,470 --> 00:02:37,310
And for that enough we might have a few different options like on off or sleep or anything else that

35
00:02:37,310 --> 00:02:38,570
we happen to need.

36
00:02:38,570 --> 00:02:42,570
So in the end of the day working with an enema could easily be replaced by a string.

37
00:02:42,590 --> 00:02:47,030
I could have power status by string and just use one of these three string values.

38
00:02:47,030 --> 00:02:50,290
The difference is that with enough times we can actually enforce it.

39
00:02:50,300 --> 00:02:55,550
So if someone tries to save a laptop's power status or something other than these three it would actually

40
00:02:55,550 --> 00:02:58,700
fail with an enum while it would work with a string.

41
00:02:58,700 --> 00:03:03,370
This should seem familiar because it's exactly what we have with our subscription payloads.

42
00:03:03,410 --> 00:03:07,610
If I head over to schema Audograph Well we have our post subscription payload.

43
00:03:07,730 --> 00:03:14,090
And our comment subscription payload at the bottom bolt how they mutation field of the type string but

44
00:03:14,090 --> 00:03:17,180
in reality the value can only be one of three things.

45
00:03:17,180 --> 00:03:22,790
It's either created updated or deleted so it would be better to actually use an income.

46
00:03:22,830 --> 00:03:26,550
Making sure it was indeed of one of those three values.

47
00:03:26,720 --> 00:03:30,790
Now in this case the mutation value is always coming from the server to the client.

48
00:03:30,860 --> 00:03:35,060
So it's not as important to use an enum when the data is coming from the client.

49
00:03:35,060 --> 00:03:38,780
It's even more important to use an enum because we can actually enforce.

50
00:03:38,780 --> 00:03:41,470
That is one of the constant types.

51
00:03:41,600 --> 00:03:43,890
So let's go ahead and see all of this in action.

52
00:03:44,210 --> 00:03:49,730
But I'm going to do is create our ENM right here and we actually start with the income keyword then

53
00:03:49,730 --> 00:03:51,200
we go ahead and give it a name.

54
00:03:51,260 --> 00:03:58,880
I'm going to call this mutation type and we're going to set up inside of here the potential constant

55
00:03:58,970 --> 00:04:00,090
values.

56
00:04:00,110 --> 00:04:05,750
Now it is a typical convention to use an uppercase character set for all of these values so it is not

57
00:04:05,750 --> 00:04:06,600
enforced.

58
00:04:06,620 --> 00:04:08,980
So you could use lowercase as well.

59
00:04:09,140 --> 00:04:16,090
So for example if I was modeling that laptop I could use on I could use off and I could use sleep.

60
00:04:16,250 --> 00:04:19,880
In our case though we are modeling the mutation type.

61
00:04:19,940 --> 00:04:25,270
So I'm going to use either created updated or deleted.

62
00:04:25,410 --> 00:04:26,320
Awesome.

63
00:04:26,370 --> 00:04:32,070
Now that we have our mutation type in place we can actually use this instead of using the string for

64
00:04:32,070 --> 00:04:33,120
both of these fields.

65
00:04:33,120 --> 00:04:39,870
So right here I can go ahead and use mutation type making that non nullable and not do the exact same

66
00:04:39,870 --> 00:04:45,610
thing down below for comment subscription payload referencing the mutation type.

67
00:04:45,630 --> 00:04:51,350
Now the mutation field for both of these types must be one of these three values.

68
00:04:51,360 --> 00:04:53,010
Currently it already is.

69
00:04:53,010 --> 00:04:54,650
So we're not going to run into any issues.

70
00:04:54,660 --> 00:05:01,530
But another advantage of using Gnome's is that it really makes it easy to catch typos and little inconsistencies

71
00:05:01,590 --> 00:05:03,480
throughout your application.

72
00:05:03,480 --> 00:05:10,520
So let's go ahead and save our schema graft you all file and actually see this in practice over in mutation.

73
00:05:10,540 --> 00:05:17,190
Don J as I am going to remove the definition up above though you can find this in the PTF guide lessoned

74
00:05:17,220 --> 00:05:18,900
notes for this lecture.

75
00:05:19,020 --> 00:05:22,750
And down below we're going to go ahead and mess with one of our published calls.

76
00:05:22,830 --> 00:05:29,670
I'm going to mess with the Create comment method right here we have our pub subduct publish call and

77
00:05:29,670 --> 00:05:35,500
I'm going to change the mutation value to something that is not listed in our genome and definition.

78
00:05:35,610 --> 00:05:38,250
So right here created is indeed listed.

79
00:05:38,250 --> 00:05:43,200
I'm going to misspell that created with two E's followed by the D.

80
00:05:43,470 --> 00:05:48,210
Now if we weren't using an email this would be perfectly valid because it is indeed a string so everything

81
00:05:48,210 --> 00:05:49,820
would work as expected.

82
00:05:49,830 --> 00:05:54,810
Now though we are using an enum though we're actually going to get an error when we try to send this

83
00:05:54,810 --> 00:05:59,100
back because this value is not listed in the enim type.

84
00:05:59,100 --> 00:06:00,970
It is not listed here.

85
00:06:01,090 --> 00:06:04,730
In the end of the day are enum values are represented as strings.

86
00:06:04,830 --> 00:06:07,920
So the fact that this is a string is great.

87
00:06:07,920 --> 00:06:09,300
Now let's go ahead and test it out.

88
00:06:09,300 --> 00:06:11,800
I'm going to move over to graph playground.

89
00:06:11,880 --> 00:06:16,010
I'm going to resubscribe to our comments for post 10.

90
00:06:16,020 --> 00:06:21,300
We can see it's lessoning that I am going to create a new comment over here in the create comment tab

91
00:06:21,450 --> 00:06:25,220
it's all ready for post 10 and so I can just fire this one off.

92
00:06:25,230 --> 00:06:27,570
Now the actual comment creation worked.

93
00:06:27,570 --> 00:06:29,840
It is the subscription that should have failed.

94
00:06:29,850 --> 00:06:31,760
So over here we can see an error.

95
00:06:32,010 --> 00:06:38,690
The message expected a value of type mutation type but received and then it showing this one created.

96
00:06:38,790 --> 00:06:44,100
So it's letting us know that the value it got back did not match up with the value that was actually

97
00:06:44,130 --> 00:06:45,270
expected.

98
00:06:45,270 --> 00:06:47,950
Now that would allow us to figure out there is a typo.

99
00:06:48,060 --> 00:06:53,250
We could then address that by removing the extra e we could save things and test them out again.

100
00:06:53,370 --> 00:06:55,080
I can restart that subscription.

101
00:06:55,080 --> 00:06:56,390
We can see it's lessening.

102
00:06:56,520 --> 00:07:01,410
I can go back and recreate that comment.

103
00:07:01,480 --> 00:07:02,620
It works once again.

104
00:07:02,710 --> 00:07:07,270
And now if I head back to the subscription tab it should indeed be working as expected.

105
00:07:07,270 --> 00:07:10,240
And we should have our little event showing up right here.

106
00:07:10,240 --> 00:07:11,460
We do indeed have it.

107
00:07:11,500 --> 00:07:17,750
We have our comment data the type for mutation is indeed created and then we have all of the data we've

108
00:07:17,760 --> 00:07:19,190
requested down below.

109
00:07:19,250 --> 00:07:21,010
That's where I'd like to start for this one.

110
00:07:21,010 --> 00:07:23,600
So let's take a quick moment to recap what we learned.

111
00:07:23,800 --> 00:07:29,650
And this video we learned about the genome type in OM's allow us to represent a set of constants and

112
00:07:29,650 --> 00:07:34,060
then any fields of that type must have a value equal to one of our Constans.

113
00:07:34,060 --> 00:07:39,790
This is great when we're modeling data and we have a set of standard values that we know about ahead

114
00:07:39,790 --> 00:07:40,540
of time.

115
00:07:40,540 --> 00:07:46,510
It doesn't make sense to use income for a post's title because we do not know the various values for

116
00:07:46,510 --> 00:07:47,930
post titles ahead of time.

117
00:07:47,930 --> 00:07:49,340
It could be anything out there.

118
00:07:49,450 --> 00:07:52,150
In the case of mutation though there are only three values.

119
00:07:52,150 --> 00:07:54,210
So it makes sense to use an Ina.

120
00:07:54,220 --> 00:07:58,340
Now if you're working with just two values you can typically get away with a boolean.

121
00:07:58,360 --> 00:08:03,220
We saw how that was possible when we had the is on property for our laptop.

122
00:08:03,220 --> 00:08:04,440
It's either on or off.

123
00:08:04,450 --> 00:08:09,460
True or false when you start to get into three or more potential fixed values though that's where the

124
00:08:09,460 --> 00:08:11,170
income comes in handy.

125
00:08:11,170 --> 00:08:16,840
So if we were working with a laptop we would have on off and sleep here we're working with mutation

126
00:08:16,840 --> 00:08:20,040
type and we have created updated and delete it.

127
00:08:20,110 --> 00:08:20,500
All right.

128
00:08:20,530 --> 00:08:24,670
That's where we're going to stop for this video and that's where we're going to stop for this section

129
00:08:24,880 --> 00:08:30,130
and this section you learned all about subscriptions and how you can fetch real time data from a graph.

130
00:08:30,230 --> 00:08:35,500
Well back end we're going to continue on with the course in the next section which is kind of like the

131
00:08:35,500 --> 00:08:36,980
start of part two.

132
00:08:37,030 --> 00:08:41,890
We're going to dive into some advanced topics we're going to start exploring data storage authentication

133
00:08:42,100 --> 00:08:44,110
and other real world features.

134
00:08:44,230 --> 00:08:46,200
I am beyond excited to get to it.

135
00:08:46,240 --> 00:08:49,880
So let's go ahead and move right in to the section introduction video.

