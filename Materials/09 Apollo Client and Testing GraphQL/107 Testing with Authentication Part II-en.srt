1
00:00:00,180 --> 00:00:05,640
We've written a few tests for authentication and in this video we're going to get a bit more experience

2
00:00:05,640 --> 00:00:11,950
by writing a few more who are going to write a test for update post create post and delete post.

3
00:00:12,060 --> 00:00:18,360
We'll work on update post together and you'll be writing test cases for create post and delete posts

4
00:00:18,420 --> 00:00:20,290
as your challenge for the video.

5
00:00:20,460 --> 00:00:26,940
So Dambulla Let's go ahead and create a test case making sure we can indeed update a post right here.

6
00:00:26,940 --> 00:00:35,640
Test should be able to update own post and then we're going to set up the function and a sync arrow

7
00:00:35,640 --> 00:00:36,430
function.

8
00:00:36,600 --> 00:00:40,230
And we're going to use the techniques explored so far.

9
00:00:40,230 --> 00:00:43,770
Let's go ahead and kick things off by creating a brand new client.

10
00:00:43,770 --> 00:00:48,990
In this case we are attempting to test that things work well when authenticated.

11
00:00:49,260 --> 00:01:00,030
So I'll create a new client calling get client in passing in user ones JWT that is user 1 dot JWT.

12
00:01:00,030 --> 00:01:06,510
From here I can go ahead and set up that operation which is going to be the update post mutation rate

13
00:01:06,510 --> 00:01:07,080
here.

14
00:01:07,080 --> 00:01:10,120
Konst update post.

15
00:01:10,340 --> 00:01:16,480
I'm going to set it up using a GQ L and a template string and down below will define the actual mutation

16
00:01:17,500 --> 00:01:18,310
perfect.

17
00:01:18,310 --> 00:01:24,220
Now all we have to decide which of our posts were actually going to update and we have to in the C database

18
00:01:24,220 --> 00:01:28,300
file we have post number one which is a published post and we have.

19
00:01:28,300 --> 00:01:32,140
Post Number two which is unpublished for this update.

20
00:01:32,140 --> 00:01:37,710
I'm going to take post number one and turn it from being published to being unpublished.

21
00:01:37,780 --> 00:01:44,320
Now in order to get that done in order to actually set up this operation I need to know the ID of that

22
00:01:44,320 --> 00:01:50,620
post and this is not a hard coded value that we can type in because remember this code runs before every

23
00:01:50,620 --> 00:01:53,990
test case it generates a brand new post.

24
00:01:54,040 --> 00:01:56,060
That means there's a unique ID.

25
00:01:56,230 --> 00:02:02,410
So like we did with our user we need to store this information somewhere and export it so our test file

26
00:02:02,500 --> 00:02:03,590
can access it.

27
00:02:03,850 --> 00:02:05,190
Let's go ahead and get this done.

28
00:02:05,200 --> 00:02:07,930
Up above just below user 1.

29
00:02:08,020 --> 00:02:11,260
I'm going to create a new variable right here.

30
00:02:11,410 --> 00:02:16,000
It Konst post 1 and we're going to set up those two properties.

31
00:02:16,030 --> 00:02:18,160
I'm going to set up input.

32
00:02:18,160 --> 00:02:25,490
This is going to contain the input we pass to Prisma And I'm also going to set up right here post.

33
00:02:25,510 --> 00:02:31,120
This is going to eventually contain the post information sent back from Prisma which will include the

34
00:02:31,120 --> 00:02:31,820
ID.

35
00:02:31,990 --> 00:02:34,950
But for now we can just send it equal to undefine.

36
00:02:35,200 --> 00:02:38,270
Now what exactly are we going to put inside of input.

37
00:02:38,350 --> 00:02:42,190
Well you don't have to use input at all for this particular test case.

38
00:02:42,190 --> 00:02:47,850
Doing so would be optional but it's a good idea to see the input verse the output on the object.

39
00:02:47,860 --> 00:02:48,950
So down below.

40
00:02:49,190 --> 00:02:52,420
But I'm going to do is first leave a little comment up here.

41
00:02:53,640 --> 00:02:58,170
Create post 1 and then down below.

42
00:02:58,400 --> 00:03:01,860
Create post 2 and 4 post 1.

43
00:03:01,880 --> 00:03:07,850
I'm going to grab the title body and published and rip those out of this object I'm leaving author in

44
00:03:07,850 --> 00:03:08,540
place.

45
00:03:08,540 --> 00:03:15,890
Since we won't know the author ID in time to include that up above down here all we're going to do is

46
00:03:15,890 --> 00:03:22,220
take post one data input and we're going to spread it out so I'll use dot dot dot.

47
00:03:22,260 --> 00:03:27,470
Up front that's going to copy all of the properties from the input object over to this one.

48
00:03:27,540 --> 00:03:29,970
And what are we going to put on the input object.

49
00:03:29,970 --> 00:03:34,030
I'm going to put those three values that we just grabbed.

50
00:03:34,200 --> 00:03:35,340
Now what are we going to do.

51
00:03:35,340 --> 00:03:44,390
Well we are going to make sure that post one dot post gets set so down below right here post one dot

52
00:03:44,390 --> 00:03:49,880
post is going to get its value from awaiting the result of our create post call.

53
00:03:49,940 --> 00:03:51,050
Excellent.

54
00:03:51,050 --> 00:03:57,380
Now down near the bottom of the file we can go ahead and export it export on our local post one object.

55
00:03:57,380 --> 00:04:03,470
So this is going to allow our test cases to access the input should they need it and the output should

56
00:04:03,470 --> 00:04:04,450
they need that.

57
00:04:04,670 --> 00:04:10,730
And in our case the new test we're creating definitely needs the output we have to know that ID.

58
00:04:11,030 --> 00:04:18,220
So let's go back to the test file and inport what we just export it up to alongside of user 1.

59
00:04:18,220 --> 00:04:19,090
I'm going to grab.

60
00:04:19,090 --> 00:04:21,010
Post one end down below.

61
00:04:21,010 --> 00:04:25,050
We're going to use that while defining our operation right here.

62
00:04:25,120 --> 00:04:31,150
Now we can set up the operation will be using update post providing the arguments it needs as well as

63
00:04:31,150 --> 00:04:32,760
these selections set.

64
00:04:32,770 --> 00:04:40,340
Let's go ahead and start with that selection set for the response will grab the ID title body.

65
00:04:40,390 --> 00:04:47,170
And lastly I'll also grab published for the arguments we have to start by defining ID which it needs

66
00:04:47,220 --> 00:04:51,940
ID is a string and we have to provide the idea of the post to update.

67
00:04:51,940 --> 00:04:59,280
In this case I will use the template string interpellation to inject post one dot Post dot ID.

68
00:04:59,440 --> 00:05:06,670
So here we are grabbing the id property off of post one post and that's what gets set down below.

69
00:05:06,670 --> 00:05:10,940
So we have the response data from Prisma back in the test case.

70
00:05:11,020 --> 00:05:14,560
We can now define it data right alongside of ID.

71
00:05:14,560 --> 00:05:18,120
This is going to allow us to define exactly what we want to change.

72
00:05:18,130 --> 00:05:19,620
That is a published post.

73
00:05:19,630 --> 00:05:21,510
We are going to unpublished it.

74
00:05:21,730 --> 00:05:24,910
So I'll be setting published equal to false.

75
00:05:24,910 --> 00:05:25,990
Excellent.

76
00:05:25,990 --> 00:05:31,390
Now we can go ahead and focus on actually firing this operation off and asserting something about what

77
00:05:31,390 --> 00:05:33,570
happens when the operation is complete.

78
00:05:33,730 --> 00:05:34,500
Right here.

79
00:05:34,720 --> 00:05:38,500
I will be destructuring data off of the response.

80
00:05:40,160 --> 00:05:47,450
Then I will use a weight with client dot mutate passing in the Options object and setting up the mutation

81
00:05:47,450 --> 00:05:48,040
in this case.

82
00:05:48,050 --> 00:05:51,240
We will be using update post defined up above.

83
00:05:51,290 --> 00:05:56,700
Now at this point the operation should have succeeded and we can set up our assertion.

84
00:05:56,990 --> 00:06:00,890
Now there's no need to assert that the operation didn't throw an error.

85
00:06:00,890 --> 00:06:06,290
Otherwise the cast case would already fail with the code in place because clients mutate would throw

86
00:06:06,290 --> 00:06:06,960
an error.

87
00:06:07,060 --> 00:06:13,400
There is no need to assert that we actually do get back these four fields since the graft UL operation

88
00:06:13,400 --> 00:06:17,700
would fail if we requested a field that the type didn't support.

89
00:06:17,720 --> 00:06:23,720
Right here for our assertion we can expect something about the particular value of the published value

90
00:06:23,780 --> 00:06:25,700
data dot update.

91
00:06:25,700 --> 00:06:27,650
Post dot published.

92
00:06:27,650 --> 00:06:30,900
So we asked for that back and we want to make sure it is now false.

93
00:06:30,920 --> 00:06:33,530
So I will use to be right here.

94
00:06:33,530 --> 00:06:34,210
False.

95
00:06:34,310 --> 00:06:35,360
Perfect.

96
00:06:35,390 --> 00:06:37,780
Now this would be a complete test case.

97
00:06:37,790 --> 00:06:40,170
You could also add more to this test case.

98
00:06:40,190 --> 00:06:43,500
If you wanted to and for example sake we will do that.

99
00:06:43,640 --> 00:06:50,030
What we're going to do is also make sure that when we look in the database we are seeing the post as

100
00:06:50,130 --> 00:06:51,540
UN published.

101
00:06:51,590 --> 00:06:54,250
So sure we're getting false back in the response.

102
00:06:54,260 --> 00:06:57,080
But what about the Prisma database itself.

103
00:06:57,080 --> 00:07:02,560
Now if I scroll up we actually don't have Prisma loaded into this particular test file.

104
00:07:02,570 --> 00:07:06,610
We do indeed have it over in our user test file and we've been using it.

105
00:07:06,770 --> 00:07:13,400
Let's go ahead and grab that inport line and bring it over to our post test suite as well so he can

106
00:07:13,400 --> 00:07:17,060
take advantage of Prisma in our test cases down below.

107
00:07:17,180 --> 00:07:23,750
We're gonna use the exists functionality once again to check that that post exists and that its published

108
00:07:23,750 --> 00:07:25,370
value is false.

109
00:07:25,370 --> 00:07:29,620
You could alternatively query for the post and look at its data directly.

110
00:07:29,630 --> 00:07:34,560
Either approach would be identical and would work just fine right here.

111
00:07:34,580 --> 00:07:39,970
I will create a new Konst called exists and I will use a wait with Prisma.

112
00:07:40,230 --> 00:07:40,930
Exists.

113
00:07:40,970 --> 00:07:47,270
Done post to check if a particular post exists in this case we're looking for a post with two features.

114
00:07:47,350 --> 00:07:55,810
One ID should be post one dot Post dot ID and the other is that its published value should be false.

115
00:07:55,910 --> 00:08:02,090
If the published value is not false that post won't be seen as existing and will get false back instead

116
00:08:02,090 --> 00:08:03,020
of true.

117
00:08:03,050 --> 00:08:08,420
So in this case we want to make sure that exists is indeed true and will add an assertion for that down

118
00:08:08,420 --> 00:08:14,970
below expecting that exists equals using to be true perfect.

119
00:08:14,990 --> 00:08:19,670
So now we're looking at the response and we're also looking at the database itself.

120
00:08:19,670 --> 00:08:24,090
I'm going to save the file that's going to run the test case and hopefully we have.

121
00:08:24,090 --> 00:08:30,620
Now I think 8 passing tests down below I can see one of the test suites finished now the other one did

122
00:08:30,830 --> 00:08:33,430
and everything went as expected.

123
00:08:33,440 --> 00:08:34,110
All right.

124
00:08:34,160 --> 00:08:38,780
Now that we have this test case in place and you've got a bit more experience it's going to be up to

125
00:08:38,780 --> 00:08:45,020
you to write tests for creating a post and for deleting a post and we'll talk about exactly what I'd

126
00:08:45,020 --> 00:08:49,250
like you to do down below in some challenge comments right here.

127
00:08:49,250 --> 00:08:55,180
You're going to write two test cases goal or write a test case for create post and delete post.

128
00:08:55,250 --> 00:08:58,240
So one is the Create post test case.

129
00:08:58,310 --> 00:09:03,410
You're going to use authentication so in this case we're expecting it to work and you're going to assert

130
00:09:03,470 --> 00:09:08,840
that the post you create actually ends up in the database with the correct fields.

131
00:09:08,960 --> 00:09:13,940
You can use a similar technique to what we used here to set up the arguments and to assert that the

132
00:09:13,940 --> 00:09:16,700
database looks right down below that.

133
00:09:16,730 --> 00:09:18,220
It's the second test case.

134
00:09:18,230 --> 00:09:20,330
You're going to make sure that delete post works.

135
00:09:20,330 --> 00:09:26,030
So once again you are going to work with a client that has authentication set up and you're going to

136
00:09:26,030 --> 00:09:33,530
remove the second post asserting that it is indeed deleted from the database after the operation completes.

137
00:09:33,530 --> 00:09:39,950
Now it's important to note that the second post currently is not exposed from the seed database file.

138
00:09:39,950 --> 00:09:46,010
So you're going to go ahead and have to do something similar to what we did for post one up above.

139
00:09:46,010 --> 00:09:49,280
Take some time to knock all of that out and test your work.

140
00:09:49,280 --> 00:09:51,450
Right now we have 8 passing test cases.

141
00:09:51,470 --> 00:09:54,970
So when you're done that you should have 10 passing tests.

142
00:09:55,070 --> 00:09:55,670
All right.

143
00:09:55,670 --> 00:09:59,110
Pause the video when you're done come back and click play.

144
00:10:03,090 --> 00:10:03,840
How that go.

145
00:10:03,870 --> 00:10:08,910
I'm going to kick things off with the first test case and I'll add that right up above.

146
00:10:08,910 --> 00:10:09,720
A new test.

147
00:10:09,750 --> 00:10:16,650
Making sure that I can indeed create a post so right here should create a new post.

148
00:10:16,680 --> 00:10:21,580
I'll be setting up that async arrow function and we're going to go through the process described.

149
00:10:21,720 --> 00:10:24,560
So in this case we will be using authentication.

150
00:10:24,660 --> 00:10:26,550
So I will set up a new client.

151
00:10:26,570 --> 00:10:28,340
Konst client equals.

152
00:10:28,530 --> 00:10:33,870
I'll be using GET client to fetch a new client and in this case we're going to go ahead and pass in

153
00:10:33,870 --> 00:10:35,030
that JWT.

154
00:10:35,040 --> 00:10:36,820
User 1 dot J.

155
00:10:36,860 --> 00:10:38,060
W T.

156
00:10:38,100 --> 00:10:38,900
Perfect.

157
00:10:39,150 --> 00:10:42,360
From here we can go ahead and actually put that to use.

158
00:10:42,360 --> 00:10:47,790
First step we have to define our operations so cost to create post can store that.

159
00:10:47,790 --> 00:10:51,950
I'll be using GQ well with a template string and right here.

160
00:10:52,020 --> 00:10:54,450
This will indeed be a mutation.

161
00:10:54,450 --> 00:11:00,600
The mutation we're using is create post and we have to pass in some arguments as well as our selection

162
00:11:00,600 --> 00:11:01,590
set.

163
00:11:01,590 --> 00:11:04,060
Let's go ahead and start with the selection set.

164
00:11:04,080 --> 00:11:09,860
So right here inside of the curly braces for this newly created post we can grab whatever we want.

165
00:11:10,080 --> 00:11:18,930
I'll grab the ID title body and published I'll just stick with those scalar fields to keep things simple.

166
00:11:19,130 --> 00:11:25,370
And in terms of create post we have to define just one argument that's data on data.

167
00:11:25,370 --> 00:11:29,170
We have to define the information that makes up the post we're trying to create.

168
00:11:29,240 --> 00:11:31,270
Right here I can set up a title.

169
00:11:31,280 --> 00:11:35,320
Let's go ahead and use something like a test post.

170
00:11:35,480 --> 00:11:37,880
Then we can set up the body.

171
00:11:38,060 --> 00:11:40,370
And for this one I can leave the string empty.

172
00:11:40,390 --> 00:11:44,380
And finally we can pick a published value for this newly created post.

173
00:11:44,380 --> 00:11:45,460
Let's go ahead and just use.

174
00:11:45,460 --> 00:11:46,060
True though.

175
00:11:46,090 --> 00:11:48,240
Either would work just fine.

176
00:11:48,250 --> 00:11:52,900
So now we have the operation defined and we can go ahead and fire it off down below.

177
00:11:53,200 --> 00:12:00,700
I'm going to use a concept we're going to grab the response data and we are going to await for the following

178
00:12:00,700 --> 00:12:06,190
our client mutate call will pass in our mutation on the mutation property.

179
00:12:06,190 --> 00:12:09,000
The mutation rate here is creed post.

180
00:12:09,190 --> 00:12:15,400
So at this point a new post should indeed be created and we can focus on the assertions that check that

181
00:12:15,400 --> 00:12:17,950
the post was created correctly right here.

182
00:12:17,950 --> 00:12:20,550
Let's go ahead and add some assertions into the mix.

183
00:12:20,560 --> 00:12:25,890
So I am going to expect something about data to create post title.

184
00:12:25,960 --> 00:12:32,680
I'm going to expect that that equals the title we had above which is the string a test post.

185
00:12:32,680 --> 00:12:38,230
Next up we can expect something about the body that's data create Post dot body.

186
00:12:38,230 --> 00:12:44,480
In this case I can use to be to assert that it is an empty string and finally we have published Sarette

187
00:12:44,500 --> 00:12:51,410
here expecting data to create post data published

188
00:12:54,650 --> 00:12:58,500
equals using to be the following the boolean true.

189
00:12:58,610 --> 00:13:03,830
With this in place we can go ahead and save our file the test suite is going to rerun and we'll look

190
00:13:03,830 --> 00:13:05,990
for that ninth passing test.

191
00:13:05,990 --> 00:13:11,390
If all goes well there we'll move on to the second test case we're creating for deleting a post.

192
00:13:11,390 --> 00:13:12,290
Everything's passing.

193
00:13:12,290 --> 00:13:15,200
So let's add that second test case right here.

194
00:13:15,320 --> 00:13:22,860
A test should delete post we're going to set this up as an async function.

195
00:13:22,880 --> 00:13:25,550
And remember we do indeed want to authenticate.

196
00:13:25,550 --> 00:13:29,790
So let's get that out of the way and set up this brand new client Konst client equals.

197
00:13:30,020 --> 00:13:36,220
I will be calling get client passing in the JWT user wan dot JWT.

198
00:13:36,350 --> 00:13:40,390
Now we're going to end up setting up that delete post mutation.

199
00:13:40,460 --> 00:13:46,590
But remember we need the idea of the post to remove and I asked you to remove the second post on purpose.

200
00:13:46,610 --> 00:13:48,290
Over in the database.

201
00:13:48,290 --> 00:13:51,070
Currently that Id never get stored anywhere.

202
00:13:51,080 --> 00:13:56,060
It's lost to the ether since we don't do anything with the response value here.

203
00:13:56,090 --> 00:14:00,600
What we're gonna do is set up a post to variable like we have for post 1.

204
00:14:00,800 --> 00:14:09,680
So I'll set up post to I'll set it up as an object will have our input object as well as our posts property.

205
00:14:09,690 --> 00:14:15,720
So right here post will be undefined for the moment and then we can copy the input up above.

206
00:14:15,790 --> 00:14:22,890
So down below I'll grab title body in published cutting it out and pasting it up above in input removing

207
00:14:22,890 --> 00:14:29,300
that extra comma on the published property line and from here we can use post to input down below.

208
00:14:29,430 --> 00:14:31,500
So right here spreading that out.

209
00:14:31,500 --> 00:14:38,370
Dot dot dot post to dot input and we're also going to do something with the return value.

210
00:14:38,370 --> 00:14:42,060
I'm going to store it on post to dot post.

211
00:14:42,180 --> 00:14:43,100
Excellent.

212
00:14:43,110 --> 00:14:48,590
Now we can actually go ahead and export that Surve right here exporting post to.

213
00:14:48,690 --> 00:14:54,420
And now we can access post to in the other file and we're going to use that to get the ID of the post

214
00:14:54,480 --> 00:14:55,600
to remove.

215
00:14:55,680 --> 00:15:02,160
I'm going to save the C database file over inside of the post test suite up at the very top alongside

216
00:15:02,220 --> 00:15:04,040
of user 1 and post 1.

217
00:15:04,050 --> 00:15:07,780
We will go ahead and grab posts to.

218
00:15:07,910 --> 00:15:08,930
Excellent.

219
00:15:08,930 --> 00:15:10,080
Now let's use that.

220
00:15:10,190 --> 00:15:16,050
So down below we're going to set up our delete post-operation right here in the test case.

221
00:15:16,310 --> 00:15:20,340
Konst delete post will be setting that up using GQ.

222
00:15:20,380 --> 00:15:25,090
Well along with a template string it is indeed a mutation.

223
00:15:25,100 --> 00:15:26,780
So we'll set that up right here.

224
00:15:26,780 --> 00:15:32,500
The mutation name is delete posts and we have to provide the ID of the post we're trying to remove.

225
00:15:32,510 --> 00:15:39,380
So right here ID equals a string and we'll use interpellation to add the ID in that's going to be post

226
00:15:39,410 --> 00:15:43,230
to dot Post dot ID.

227
00:15:43,380 --> 00:15:48,770
Down below we can set up our selection set and this is the selection set for the deleted post where

228
00:15:48,800 --> 00:15:54,000
you can just grab something like the ID that would be perfectly fine and maybe you grabbed more or something

229
00:15:54,000 --> 00:15:54,380
different.

230
00:15:54,390 --> 00:15:55,470
That's OK.

231
00:15:55,530 --> 00:15:56,310
And down below.

232
00:15:56,340 --> 00:15:57,800
We're going to fire this off.

233
00:15:57,930 --> 00:16:05,250
So I'm going to go ahead and await the following client docked mutate passing in our mutation property

234
00:16:05,250 --> 00:16:09,980
on the options object using the operation defined above delete post.

235
00:16:10,080 --> 00:16:15,810
Now we can set up an assertion and all we're going to do is use exists to see if the post is still in

236
00:16:15,810 --> 00:16:24,210
the database so Konst exists equals we'll use a weight with Prisma dot exists dot post passing in the

237
00:16:24,210 --> 00:16:26,040
ID of that second post.

238
00:16:26,040 --> 00:16:33,800
So Id is going to get its value from post to dot post ID and then down below.

239
00:16:34,080 --> 00:16:40,000
We're going to expect that the exists value is true to be passing in true.

240
00:16:40,230 --> 00:16:41,160
Perfect.

241
00:16:41,160 --> 00:16:47,400
Now we have our second test case in place I can save the test suite once again and we should have 10

242
00:16:47,550 --> 00:16:49,720
passing tests if we do.

243
00:16:49,890 --> 00:16:55,050
We're going to move on to the next video where we'll see the database with some comments and set up

244
00:16:55,050 --> 00:16:57,930
a couple of comment test cases right here.

245
00:16:57,930 --> 00:17:00,060
We do indeed have an error.

246
00:17:00,060 --> 00:17:02,310
I can see that the following is occurring.

247
00:17:02,430 --> 00:17:03,260
We expected.

248
00:17:03,270 --> 00:17:04,020
True.

249
00:17:04,050 --> 00:17:05,770
We received false.

250
00:17:05,820 --> 00:17:07,460
This was a typo on my part.

251
00:17:07,470 --> 00:17:10,440
This should have been false as opposed to true.

252
00:17:10,440 --> 00:17:16,140
Now I can go back at this hour and pretend to be a perfect developer but when testing iteration is an

253
00:17:16,140 --> 00:17:20,530
important part you might not nail everything on the first try and that's OK.

254
00:17:20,640 --> 00:17:26,340
But once you do get to a working test suite you know that you're secure and you're going to be able

255
00:17:26,340 --> 00:17:31,830
to detect changes down the line since your tests will start to fail if anything breaks.

256
00:17:31,830 --> 00:17:32,440
All right.

257
00:17:32,460 --> 00:17:35,010
That's where we're going to stop for this one.

258
00:17:35,100 --> 00:17:38,020
The Focused of the next video is on comments.

259
00:17:38,040 --> 00:17:40,200
So let's go ahead and jump right into that.

