1
00:00:00,180 --> 00:00:00,860
Welcome back.

2
00:00:00,870 --> 00:00:07,080
As promised we're going to be setting up the relationship between the user and the post via a new posts

3
00:00:07,110 --> 00:00:09,390
field onto the user type.

4
00:00:09,390 --> 00:00:15,690
So right here that would be posts and the actual type for posts is going to be exactly the same as the

5
00:00:15,690 --> 00:00:18,160
type for the posts query up above.

6
00:00:18,210 --> 00:00:23,670
We have an array with the individual items being a post that is exactly what we'll have below as well.

7
00:00:23,790 --> 00:00:26,950
So posts is an array a non nullable array.

8
00:00:27,090 --> 00:00:30,130
And inside of there we will have it not at nullable posts.

9
00:00:30,180 --> 00:00:30,950
Excellent.

10
00:00:30,960 --> 00:00:32,670
So this is something we've already done.

11
00:00:32,670 --> 00:00:38,820
We have the exact same code right here where we need to do though is teach graphically well how to get

12
00:00:38,820 --> 00:00:41,900
the posts for a user when it has the user.

13
00:00:41,940 --> 00:00:47,710
This is similar to how we talk graphed well how to get the author when it has the post so down below.

14
00:00:47,850 --> 00:00:54,120
We had already set up post author what we need to set up now is user posts.

15
00:00:54,180 --> 00:01:01,350
Remember if one of our fields is not a scalar type we have to set up a custom resolver function to teach

16
00:01:01,350 --> 00:01:03,800
graph UL how to get the correct data.

17
00:01:03,910 --> 00:01:12,170
So down below after the post object I'm going to add a nother object called user uppercase U user.

18
00:01:12,340 --> 00:01:18,820
And we're going to add a single method posts setting up all of the arguments we know we get we get parent

19
00:01:19,240 --> 00:01:23,350
we get args we get the context and we get info.

20
00:01:23,350 --> 00:01:29,060
Now inside of here what do we have access to what we have access to the user via parent.

21
00:01:29,140 --> 00:01:33,360
Let's visualize this by changing one of our queries over engraft playground.

22
00:01:33,430 --> 00:01:38,560
We had this query we used a little while ago to fetch all of the users and we do get all of the users

23
00:01:38,560 --> 00:01:42,480
back what we want to be able to do that was also get all of their posts.

24
00:01:42,490 --> 00:01:48,050
So right here I would want to be able to access posts picking which fields I want from each post.

25
00:01:48,160 --> 00:01:53,440
Let's say I want the ID and the title so I can show a little preview of all of the user's posts on their

26
00:01:53,440 --> 00:01:55,930
author home page for example.

27
00:01:55,930 --> 00:01:58,660
Now what's going to happen when this query actually runs.

28
00:01:58,660 --> 00:02:05,470
First up it is going to run the resolver method for our users query that lives just up above.

29
00:02:05,470 --> 00:02:08,230
So it is going to run this method.

30
00:02:08,230 --> 00:02:15,250
Now when it returns a value it is going to check if we have requested any of those relational types.

31
00:02:15,250 --> 00:02:19,180
So if we just asked for ID or name or email or age that's it.

32
00:02:19,180 --> 00:02:23,380
Whatever data comes back is going to be the data that comes back in the response.

33
00:02:23,380 --> 00:02:28,990
But if it's see is that McQueary query has asked for relational data in this case posts it is going

34
00:02:28,990 --> 00:02:34,010
to call the user posts method for every single user at found.

35
00:02:34,120 --> 00:02:40,130
So if this function returns six users it's going to call this method six times.

36
00:02:40,140 --> 00:02:46,840
In our case this method is going to return just three users so it will call this function three times.

37
00:02:46,840 --> 00:02:51,270
Each time it calls it it'll be calling it with a different value for parent.

38
00:02:51,280 --> 00:02:56,410
It will be calling it with each of those three objects which means that we can access things like the

39
00:02:56,410 --> 00:03:04,870
parent id the parent name and the parent email we can access anything on the user object.

40
00:03:04,870 --> 00:03:06,410
Now what are we actually going to do.

41
00:03:06,520 --> 00:03:14,020
Well what we're going to do is use the filter method on posts to find just the posts whose author property

42
00:03:14,170 --> 00:03:16,260
matches up with Parent ID.

43
00:03:16,270 --> 00:03:18,050
So that would look a little bit like this.

44
00:03:18,130 --> 00:03:24,450
I will return posts that filter I'm going to pass in that callback function.

45
00:03:24,470 --> 00:03:30,680
We have an array of posts so I'll call the individual item a post and we want to return true if this

46
00:03:30,680 --> 00:03:34,450
post belongs to this author represented by parent.

47
00:03:34,460 --> 00:03:41,600
So right here I will return Post dot author checking if that equals Parent ID.

48
00:03:41,630 --> 00:03:47,510
So if the post's author property matches up with the parents id property we know we've found a match

49
00:03:47,540 --> 00:03:51,050
and will associate that post with that user.

50
00:03:51,050 --> 00:03:57,530
Now what we can actually save index dot J s over inside of the graphical playground I can refresh my

51
00:03:57,530 --> 00:03:58,190
schema.

52
00:03:58,430 --> 00:04:02,140
We can see this is now a valid query and I've actually fire it off.

53
00:04:02,150 --> 00:04:02,760
What do we get.

54
00:04:02,780 --> 00:04:06,020
We get exactly what we would expect for each user.

55
00:04:06,020 --> 00:04:11,420
We have a new posts property its value is an array and it is an array of posts.

56
00:04:11,420 --> 00:04:13,750
So here I can see that Andrew has two posts.

57
00:04:13,760 --> 00:04:21,200
We have graphed Cuil 101 and graph 201 and down below I can see Sarah has a single post programming

58
00:04:21,200 --> 00:04:21,890
music.

59
00:04:21,920 --> 00:04:24,730
And finally we have Mike Mike has no posts.

60
00:04:24,740 --> 00:04:28,380
So what comes back we get back an empty array.

61
00:04:28,430 --> 00:04:35,450
So now we have our relationship set up in two directions given a post we can access its author via the

62
00:04:35,450 --> 00:04:42,290
author property given a user we can access all of their posts via the host's property.

63
00:04:42,290 --> 00:04:45,920
With these relationships set up we can actually do some pretty silly things.

64
00:04:45,950 --> 00:04:52,370
For example over inside of our query I could start with the users then get the users posts then from

65
00:04:52,370 --> 00:04:55,310
the posts I could go back and get the author.

66
00:04:55,310 --> 00:05:00,880
Now this doesn't serve much of a real world purpose but it is indeed valid and totally possible.

67
00:05:00,890 --> 00:05:07,130
So right here I can run this and well we are going to get some redundant data since the ID and name

68
00:05:07,130 --> 00:05:08,810
already exist right here.

69
00:05:08,810 --> 00:05:10,360
The query does indeed work.

70
00:05:10,430 --> 00:05:15,650
So I have my user object that I have the posts object than in there.

71
00:05:15,650 --> 00:05:22,160
I have author with the author object all have the correct fields specified in the query.

72
00:05:22,160 --> 00:05:27,020
Now we might not do something like this because we're asking for the same data over again but once we

73
00:05:27,020 --> 00:05:31,120
set up other custom types and other relationships it'll make a bit more sense.

74
00:05:31,130 --> 00:05:36,680
Maybe for example I want to get old users get all of their posts and then get some comments for the

75
00:05:36,680 --> 00:05:38,150
individual posts.

76
00:05:38,150 --> 00:05:42,290
That's something that's a bit more practical and could serve a real purpose.

77
00:05:42,350 --> 00:05:44,690
So that brings us to the third custom type.

78
00:05:44,690 --> 00:05:51,160
We're gonna need for this application for now which is the comment type So we're going to have a comment.

79
00:05:51,170 --> 00:05:58,250
A comment is associated with a user but a comment is also associated with a post a comment belongs to

80
00:05:58,250 --> 00:06:01,050
a post but a user also wrote it.

81
00:06:01,110 --> 00:06:03,960
And that's what we're going to focus on for the rest of this section.

82
00:06:03,980 --> 00:06:10,220
It is going to be a series of challenges requiring you to use everything you've learned so far in this

83
00:06:10,220 --> 00:06:11,000
section.

84
00:06:11,000 --> 00:06:17,120
Since we are getting to the end of this section on queries I'm really excited to get into this series

85
00:06:17,120 --> 00:06:18,180
of challenges.

86
00:06:18,290 --> 00:06:23,340
Let's go ahead and jump right into the next video and get started with the very first one.

