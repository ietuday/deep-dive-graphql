1
00:00:00,240 --> 00:00:05,140
In this video we're going to talk about how we can better structure our graphics applications.

2
00:00:05,160 --> 00:00:08,620
Now we're not just going to talk about it we're actually going to do it.

3
00:00:08,670 --> 00:00:15,810
So we're going to take index dot J S from being what about 300 lines of code to being about 10 or 20

4
00:00:15,810 --> 00:00:16,900
lines of code.

5
00:00:17,100 --> 00:00:22,560
Now at the end of the day what we do in this video will not change the functionality of the application

6
00:00:22,560 --> 00:00:24,090
in any meaningful way.

7
00:00:24,090 --> 00:00:29,910
The goal of this one is to give us a better directory structure so it's easier to continue to expand

8
00:00:29,970 --> 00:00:35,560
on our app as files get really really long and it's really really hard to find things.

9
00:00:35,670 --> 00:00:41,490
We want a better file and folder structure making it easy to stay organized even as our app gets big

10
00:00:41,700 --> 00:00:43,800
to kick off our project refactoring.

11
00:00:43,800 --> 00:00:49,290
What I'd like to do is take our type definitions and break them out into their very own graph to l file

12
00:00:49,440 --> 00:00:55,050
allowing us to manage them on their own with things like syntax highlighting opposed to just having

13
00:00:55,050 --> 00:00:57,340
them in a string like we currently do.

14
00:00:57,600 --> 00:00:59,100
So what are we going to do to get that done.

15
00:00:59,100 --> 00:01:02,670
Well step one is to create a new file to put all of this stuff.

16
00:01:02,670 --> 00:01:07,770
We're going to make a brand new one right in the source directory and it's common to call this file

17
00:01:07,770 --> 00:01:09,420
schema dot graft.

18
00:01:09,480 --> 00:01:13,280
Well then once again you're free to call it whatever you'd like.

19
00:01:13,290 --> 00:01:16,580
Now what goes inside of here well what goes inside of here is Graff.

20
00:01:16,580 --> 00:01:22,890
Q Well code if you installed one of the many vs C graph you all plug ins like I mentioned earlier in

21
00:01:22,890 --> 00:01:27,350
the class you are going to get things like syntax highlighting in this file.

22
00:01:27,450 --> 00:01:32,280
Let's go ahead and actually see that by taking R-Type type definitions and copying them over.

23
00:01:32,280 --> 00:01:37,560
So we're going to take everything inside of the template string all the way down from the closing curly

24
00:01:37,560 --> 00:01:41,740
brace for the comment type all the way up to our definition of the query type.

25
00:01:42,060 --> 00:01:43,590
I'm going to cut that out.

26
00:01:43,710 --> 00:01:46,010
Go over to the new file and paste it in.

27
00:01:46,320 --> 00:01:49,940
All I have to do is unindexed things one time and there we go.

28
00:01:50,040 --> 00:01:50,950
We now have a graph.

29
00:01:50,960 --> 00:01:57,690
Q Well file that contains our application schema exactly like we had it before but now lives in its

30
00:01:57,720 --> 00:01:58,920
own separate place.

31
00:01:58,920 --> 00:02:02,350
Much easier to find manage and work with.

32
00:02:02,430 --> 00:02:05,980
Now at this point we can't just save our files and have our apps still work.

33
00:02:06,060 --> 00:02:09,870
Because over here we have an empty type definitions straight.

34
00:02:10,020 --> 00:02:11,300
So how are we going to fix that.

35
00:02:11,490 --> 00:02:16,440
Well it's a fix that we're actually going to remove the type deps variable altogether.

36
00:02:16,680 --> 00:02:22,800
And down below we're going to change how we can figure our graph Well yoga server at the very bottom

37
00:02:22,800 --> 00:02:23,630
of the file.

38
00:02:23,640 --> 00:02:27,570
Currently we're using the type deps variable that no longer exists.

39
00:02:27,570 --> 00:02:29,900
So we can no longer use our shorthand.

40
00:02:29,910 --> 00:02:37,050
What we're gonna do instead is set type deaths equal to a string and the string value here is the path

41
00:02:37,110 --> 00:02:39,900
relative to the root of your application.

42
00:02:39,900 --> 00:02:43,060
So for our purposes that would be daat forward slash.

43
00:02:43,080 --> 00:02:45,650
Now the route would be the graph BASIX folder.

44
00:02:45,780 --> 00:02:51,720
So we would go to the source directory forward slash and then we have to find digraph file that contains

45
00:02:51,720 --> 00:02:54,280
our schema that is schema dot graph.

46
00:02:54,280 --> 00:02:55,870
Q L excellent.

47
00:02:56,010 --> 00:03:03,340
So now what we have is a separate schema file though our application is still going to work as expected.

48
00:03:03,600 --> 00:03:08,710
If I go ahead and expand the terminal we can see that things did restart and we're not getting any error.

49
00:03:08,730 --> 00:03:11,120
The application is still functioning.

50
00:03:11,340 --> 00:03:16,020
And if I actually went ahead and ran one of our queries we can see it's still working over there as

51
00:03:16,020 --> 00:03:16,570
well.

52
00:03:16,600 --> 00:03:22,440
Now by breaking this out into its own file we've actually also broken node one currently gnomon is not

53
00:03:22,440 --> 00:03:28,500
going to automatically restart our application when we make changes to this separate graph file because

54
00:03:28,500 --> 00:03:32,520
it does not watch files with the graphical extension by default.

55
00:03:32,520 --> 00:03:38,730
So if I change age from being in int to being a float and I save the file we can see that Nordman didn't

56
00:03:38,730 --> 00:03:39,300
do anything.

57
00:03:39,300 --> 00:03:40,570
It has not restarted.

58
00:03:40,710 --> 00:03:42,700
So that's obviously a problem for us.

59
00:03:42,720 --> 00:03:46,800
I do want our application to restart when I change the schema file.

60
00:03:46,800 --> 00:03:51,990
We can actually fix this by using one of the arguments that node supports.

61
00:03:52,200 --> 00:03:56,410
Let's head over to the browser real quick and go over to the gnomon Web site.

62
00:03:56,520 --> 00:04:00,010
Let's get have dot com forward slash Remmy forward slash gnomon.

63
00:04:00,030 --> 00:04:05,220
This is where we were earlier in the class and if we scroll down on the home page there are a few different

64
00:04:05,220 --> 00:04:07,210
ways we can actually configure this tool.

65
00:04:07,260 --> 00:04:12,190
And one of the ways we can configure it is by specifying the extensions we want to support.

66
00:04:12,350 --> 00:04:19,020
So right here specifying extenstion watchlist now by default gnomon is going to watch the following

67
00:04:19,020 --> 00:04:20,730
files with these extensions.

68
00:04:20,790 --> 00:04:27,150
But we can also specify our own using the either or the x t argument.

69
00:04:27,160 --> 00:04:30,310
So over here all we need to do is change package.

70
00:04:30,330 --> 00:04:32,190
Jason a little bit.

71
00:04:32,190 --> 00:04:37,730
I'm going to add on the extension argument and we're gonna provide the file extensions we want gnomon

72
00:04:37,740 --> 00:04:43,760
to watch the first of course being the javascript file extension and the second being the graph.

73
00:04:43,760 --> 00:04:45,630
Q Well extension.

74
00:04:45,630 --> 00:04:51,450
Now if we save package dot Jason we are indeed going to need to restart things but once we restart things

75
00:04:51,660 --> 00:04:56,140
no demand is going to pay attention to changes in our graph file.

76
00:04:56,310 --> 00:04:58,460
I'm going to go ahead and make that same change.

77
00:04:58,650 --> 00:05:05,440
I'm going to switch this back to a float save the file and this time around we can see gnomon did indeed

78
00:05:05,470 --> 00:05:06,690
restart which is awesome.

79
00:05:06,700 --> 00:05:08,340
And if I were to change it back to it.

80
00:05:08,350 --> 00:05:10,400
And it's going to restart again.

81
00:05:10,420 --> 00:05:15,760
So now we have a separate schema file and we also have it working with gnomon.

82
00:05:15,820 --> 00:05:21,580
So we have our first refactoring step down and there's still a lot of stuff in index Dhananjay S..

83
00:05:21,700 --> 00:05:23,670
So let's continue to work through some of this.

84
00:05:23,710 --> 00:05:29,560
And the next thing I'd like to do is take our temporary data and break that out into its own file as

85
00:05:29,560 --> 00:05:30,180
well.

86
00:05:30,310 --> 00:05:35,650
To start I'm going to remove this comment right here about demo user data and I'm also going to remove

87
00:05:35,650 --> 00:05:39,140
these Scheller types comment which has been around for a bit too long.

88
00:05:39,250 --> 00:05:45,760
And the goal is to take these three arrays users posts and comments and find a better place for them.

89
00:05:46,000 --> 00:05:50,830
Now what we're going to do here where we're going to put these is not just going to work for static

90
00:05:50,830 --> 00:05:51,780
data like this.

91
00:05:51,910 --> 00:05:57,940
It's also going to be exactly what we end up using when we wire up graphs ul to work with a real world

92
00:05:57,940 --> 00:05:59,560
production ready database.

93
00:05:59,560 --> 00:06:04,810
Step one is going to be to create a new file in the source directory and this will be the last file

94
00:06:04,810 --> 00:06:10,070
that we actually put right in the source folder will be creating subdirectories for everything else.

95
00:06:10,220 --> 00:06:12,690
We're going to call this one db dot J.

96
00:06:12,820 --> 00:06:17,710
And this file is going to be around even when we no longer just work with static data.

97
00:06:17,740 --> 00:06:21,340
It's going to be an important piece to the puzzle in the future as well.

98
00:06:21,490 --> 00:06:27,010
For the moment though what we're going to do is take our three arrays so users posts and then down below

99
00:06:27,010 --> 00:06:34,330
comments we are going to cut them out of this file and we're going to paste them over in Dot J S and

100
00:06:34,460 --> 00:06:37,370
then we're going to create one object that holds all three.

101
00:06:37,420 --> 00:06:41,350
We'll export it and we'll be able to use that elsewhere in the application.

102
00:06:41,350 --> 00:06:49,720
So Konst DBI for example is going to equal an object and right here this object is going to have users

103
00:06:49,720 --> 00:06:50,440
on it.

104
00:06:50,440 --> 00:06:53,740
So we're setting the users property equal to the users variable.

105
00:06:53,760 --> 00:06:56,060
Value will do the same thing for posts.

106
00:06:56,070 --> 00:07:01,960
And finally for comments as well that means we can actually switch all three of these back to being

107
00:07:01,960 --> 00:07:06,550
Constans since they're no longer going to get reassigned in the same way they were before.

108
00:07:06,550 --> 00:07:11,050
So right here users posts and comments can all be constants once again.

109
00:07:11,230 --> 00:07:16,630
And the last thing we're going to do in this file is just export D-B as either unnamed export or the

110
00:07:16,630 --> 00:07:17,390
default line.

111
00:07:17,410 --> 00:07:19,280
And I'll just go with the default one.

112
00:07:19,390 --> 00:07:23,520
So export D-B as default.

113
00:07:23,560 --> 00:07:24,310
Perfect.

114
00:07:24,490 --> 00:07:27,450
So that is actually it for DB J s.

115
00:07:27,520 --> 00:07:29,510
But this brings up another problem.

116
00:07:29,620 --> 00:07:33,060
How exactly do we take advantage of what we just did.

117
00:07:33,130 --> 00:07:38,950
Now it might seem easy it might seem like we can just import the DB variable into this file and then

118
00:07:38,950 --> 00:07:43,660
access db users instead of just users and you would be correct.

119
00:07:43,660 --> 00:07:49,050
The problem though is that all of this stuff on resolvers isn't going to live here either.

120
00:07:49,060 --> 00:07:51,970
Not all of these methods are going to live in the same file.

121
00:07:52,030 --> 00:07:54,640
We're going to break our queries out into their own file.

122
00:07:54,640 --> 00:07:58,020
Mutations are going to have their own folder with various files.

123
00:07:58,060 --> 00:08:03,430
Our other custom resolvers for our object types are going to live in their own files so we're not going

124
00:08:03,430 --> 00:08:07,060
to have just one place for all of this lives and to solve this.

125
00:08:07,110 --> 00:08:12,320
What I want to talk about is this third argument that gets passed to all of our resolver methods.

126
00:08:12,460 --> 00:08:19,660
This is the context the context is something that we can set so we can set up some context for our API

127
00:08:19,930 --> 00:08:25,300
and the context which is just an object with a set of properties will get passed to every single resolver

128
00:08:25,300 --> 00:08:26,110
method.

129
00:08:26,110 --> 00:08:33,370
So what we can do is set up that DBI object over here to be part of our context and that DBI object

130
00:08:33,430 --> 00:08:38,530
will get passed to every single resolver method regardless of where it's actually defined.

131
00:08:38,860 --> 00:08:43,000
That's exactly what we're going to end up doing and to start this process off all we really need to

132
00:08:43,000 --> 00:08:48,850
do is add one new property onto our GRATHWOHL yoga configuration down below.

133
00:08:49,030 --> 00:08:54,760
So down here we're going to add something additional into the mix and this one appropriately is called

134
00:08:55,120 --> 00:08:56,290
context.

135
00:08:56,350 --> 00:09:03,070
No context is going to be an object and on there we're going to define the things we want to set up

136
00:09:03,190 --> 00:09:07,790
on context so we can choose to pass in whatever values we happen to need.

137
00:09:08,060 --> 00:09:10,750
Well later on we're going to pass in our database connection.

138
00:09:10,750 --> 00:09:15,760
We're also going to use this for authentication passing and things like the authentication token the

139
00:09:15,760 --> 00:09:16,820
user used.

140
00:09:16,870 --> 00:09:20,620
Context is a very useful and important feature of graft.

141
00:09:20,710 --> 00:09:27,370
Well and the graphical yoga server and well we're going to do here is inport the database and then we're

142
00:09:27,370 --> 00:09:29,720
going to set it up on the context object.

143
00:09:29,800 --> 00:09:33,420
So up above let's go ahead and start with the inport.

144
00:09:33,430 --> 00:09:38,200
Now typically I like to add my third party inputs first and then my custom imports.

145
00:09:38,230 --> 00:09:44,950
Second so right here I am going to import D-B which we set up as the default export from the following

146
00:09:44,950 --> 00:09:45,850
file.

147
00:09:45,850 --> 00:09:51,220
Now if you remember from earlier in the course when we are trying to load in a file in our application

148
00:09:51,400 --> 00:09:55,620
we go ahead and start with daat forward slash to specify the relative path.

149
00:09:55,810 --> 00:09:57,840
And right here the file is in the same folder.

150
00:09:57,850 --> 00:09:59,450
So we can just use DBI.

151
00:09:59,470 --> 00:10:02,070
No need to add the Java extension.

152
00:10:02,080 --> 00:10:03,390
You could indeed do that.

153
00:10:03,390 --> 00:10:04,700
Both would be fine.

154
00:10:04,980 --> 00:10:11,220
So we have the db object and down below all we're going to do is set up a DB property giving it the

155
00:10:11,220 --> 00:10:15,460
value of DB and we can just use the shorthand syntax for that.

156
00:10:15,720 --> 00:10:22,590
So now in effect we are passing that database object to every single one of the resolvers for our application

157
00:10:22,890 --> 00:10:25,860
regardless of where these resolvers actually live.

158
00:10:25,860 --> 00:10:31,230
This is going to give us a ton of flexibility allowing us to move these around to different files and

159
00:10:31,230 --> 00:10:31,830
folders.

160
00:10:31,920 --> 00:10:33,890
Which is exactly what we're going to end up doing.

161
00:10:33,900 --> 00:10:38,970
We want to be able to structure our application in a way that doesn't constrain us as our application

162
00:10:38,970 --> 00:10:39,620
grows.

163
00:10:39,660 --> 00:10:42,200
And context is a big part of that.

164
00:10:42,210 --> 00:10:48,210
All of our resolver methods now have an object stored on context and that object has a single property

165
00:10:48,240 --> 00:10:54,790
D.B and the db object has three properties users posts and comments.

166
00:10:54,840 --> 00:10:58,650
Which means that we can now take advantage of all of those inside of our resolvers.

167
00:10:58,650 --> 00:11:02,240
So right here we return users instead of just users.

168
00:11:02,250 --> 00:11:06,450
It would be context dot D-B dot users just like this.

169
00:11:06,660 --> 00:11:11,230
And we could even structure this argument to grab DB directly.

170
00:11:11,340 --> 00:11:13,190
A very popular thing to do.

171
00:11:13,350 --> 00:11:19,350
So instead of grabbing the context argument we can go ahead and destructuring adding curly braces right

172
00:11:19,350 --> 00:11:24,720
here and we can say we just want the DB property off of that third argument.

173
00:11:24,720 --> 00:11:28,810
Now we can shorten this accessing just D-B dot users.

174
00:11:28,980 --> 00:11:32,520
So this is a very popular approach when working with context.

175
00:11:32,520 --> 00:11:38,120
It's something we'll be doing throughout the applications or we have DB users down below.

176
00:11:38,130 --> 00:11:45,090
We are going to have DB users again anywhere in our resolvers where we're accessing users posts or comments

177
00:11:45,330 --> 00:11:50,430
we want to switch this up and this process is going to take a few minutes and that's going to be a slightly

178
00:11:50,430 --> 00:11:56,180
boring few minutes but that's OK because it is going to set us up for success in the future.

179
00:11:56,190 --> 00:11:59,490
So just bear with me as we work through this refactoring right here.

180
00:11:59,490 --> 00:12:06,150
Once again I am going to deep structure grabbing just the DB property off of that context object.

181
00:12:06,150 --> 00:12:14,100
We have posts we want D-B posts down here we have posts that filter I want D-B dot posts dot filter

182
00:12:14,430 --> 00:12:18,840
and inside of our filter callback below we have no users of either 3.

183
00:12:18,960 --> 00:12:20,320
So we can continue on.

184
00:12:20,640 --> 00:12:27,360
I'm going to deep structure D-B right here and use DBI data comments as the return value Myan post can

185
00:12:27,360 --> 00:12:28,670
stay as they are.

186
00:12:28,680 --> 00:12:34,020
Those are currently still just static data will actually work on those as we start to set up things

187
00:12:34,020 --> 00:12:36,740
like authentication a bit later in the class.

188
00:12:36,870 --> 00:12:40,240
That brings us to our mutations where we definitely use this data.

189
00:12:40,410 --> 00:12:47,520
So right here for create user I'm going to destructor the database we use D-B dot users dot some right

190
00:12:47,520 --> 00:12:48,390
here.

191
00:12:48,390 --> 00:12:51,600
Next up we have users don't push.

192
00:12:51,620 --> 00:12:58,580
So D-B dot users dot push and that is it for create user damage so that we have delete user We also

193
00:12:58,580 --> 00:13:00,110
need to do the same process.

194
00:13:00,110 --> 00:13:02,590
So this is where things start to get a little boring.

195
00:13:02,660 --> 00:13:08,870
D.B dot and I'm actually just going to copy D-B dot to the clipboard so we can go ahead and just paste

196
00:13:08,870 --> 00:13:10,500
that in where needed.

197
00:13:10,520 --> 00:13:15,770
Right here we splice the users I'm going to paste D-B dot beforehand right here we filter the posts

198
00:13:16,140 --> 00:13:20,360
down below we filter our comments and we set a new value for comments.

199
00:13:20,360 --> 00:13:22,910
So we have to do the same thing for posts right here.

200
00:13:22,970 --> 00:13:29,570
So we set DB up posts equal to whatever comes back from DB posts dot filter and we'll do the same thing

201
00:13:29,570 --> 00:13:33,750
for comments adding it before comments in both locations.

202
00:13:33,800 --> 00:13:34,940
Perfect.

203
00:13:34,940 --> 00:13:38,100
Next up Dambulla we have the same thing for comments once again.

204
00:13:38,100 --> 00:13:41,760
And that wraps up the changes necessary for delete user.

205
00:13:41,810 --> 00:13:47,180
After that we have create post so right here I will deep structure the database property.

206
00:13:47,180 --> 00:13:50,610
We have users data some will add DB in front of that.

207
00:13:50,690 --> 00:13:53,180
Then down below we have posts that push.

208
00:13:53,240 --> 00:13:55,920
I will add DBI in front of that as well.

209
00:13:55,970 --> 00:13:59,140
That brings us to the delete push resolver method.

210
00:13:59,330 --> 00:14:05,150
I'm going to go ahead and D structure the database put DBI data in front of posts there Double-O we

211
00:14:05,150 --> 00:14:06,420
slice our posts.

212
00:14:06,440 --> 00:14:08,350
We need divi dot in front of that.

213
00:14:08,570 --> 00:14:14,750
And the same thing for comments twice once here and once here that brings us to create comment.

214
00:14:14,750 --> 00:14:16,310
We're getting close to the end.

215
00:14:16,310 --> 00:14:18,790
We need to access that DBI argument.

216
00:14:18,920 --> 00:14:21,200
And what are we going to do with the D-B argument.

217
00:14:21,200 --> 00:14:23,880
Well I'm going to access it in a couple of places.

218
00:14:24,020 --> 00:14:29,690
We have two instances right here where we check if the users and the posts exist then Double-O.

219
00:14:29,840 --> 00:14:35,390
We have one more instance where we add something on it to the comments array that brings us to delete

220
00:14:35,390 --> 00:14:35,930
comment.

221
00:14:35,930 --> 00:14:39,740
Our last nutation right here we need that DB argument.

222
00:14:39,740 --> 00:14:44,300
We're going to use it for comments right here and we're also going to use it down below where we use

223
00:14:44,300 --> 00:14:46,760
comments dot splice.

224
00:14:46,760 --> 00:14:53,530
That brings us to our custom object resolvers we have post right here I am going to do structure d.b.

225
00:14:53,750 --> 00:15:00,570
We have users dat find that's going to be D-B dot users dot find for comments we have comments filter.

226
00:15:00,590 --> 00:15:04,640
I'm going to restructure D.B and change that do DB comments.

227
00:15:04,690 --> 00:15:11,750
Builder and we have the same thing for our other four methods right here destructuring the D-B adding

228
00:15:11,750 --> 00:15:13,010
it up front.

229
00:15:13,010 --> 00:15:15,290
Same thing for the comment post method.

230
00:15:17,400 --> 00:15:20,010
Then we have the same thing for user posts.

231
00:15:21,860 --> 00:15:25,490
And finally we have the same thing for user comments.

232
00:15:25,550 --> 00:15:26,800
So thanks for bearing with me.

233
00:15:26,800 --> 00:15:31,940
I know that wasn't the most fun three minutes of that course but what we have now is actually really

234
00:15:31,940 --> 00:15:32,870
special.

235
00:15:32,870 --> 00:15:39,830
We have a setup where our resolver methods don't rely on that global D-B variable it gets passed in

236
00:15:39,830 --> 00:15:41,250
via the context.

237
00:15:41,300 --> 00:15:46,790
So it's now going to be very easy to break these methods out into their own files.

238
00:15:46,790 --> 00:15:50,200
We're going to talk about exactly how we can do that in the next video.

239
00:15:50,390 --> 00:15:54,280
So let's take a quick moment to recap just how far we've gotten.

240
00:15:54,800 --> 00:15:59,900
We started off this video by breaking our type definitions out into their very own file in the source

241
00:15:59,900 --> 00:16:01,900
folders schema digraph QOL.

242
00:16:02,390 --> 00:16:08,660
We were able to load those in by providing the path as the value for type depths when setting up our

243
00:16:08,660 --> 00:16:09,220
server.

244
00:16:09,440 --> 00:16:14,420
So we can either provide our type definitions in line like we were previously doing or we can break

245
00:16:14,420 --> 00:16:19,970
them out into their own file which is the preferred approach for a real world production grade graph.

246
00:16:19,970 --> 00:16:27,740
Q Well API the next thing we did is we set up context for the application context is going to have values

247
00:16:27,980 --> 00:16:33,950
that are pretty universal things that should be shared across your app and in the case of a real graphical

248
00:16:33,980 --> 00:16:36,730
API one of those is the database connection.

249
00:16:36,850 --> 00:16:42,350
All of our method should be able to use the database connection to do things like read write update

250
00:16:42,350 --> 00:16:43,430
and create data.

251
00:16:43,640 --> 00:16:45,100
So what are we going to do for that.

252
00:16:45,110 --> 00:16:50,900
Well we're going to pass the db in currently just a static set of arrays and that gives us access to

253
00:16:50,900 --> 00:16:56,540
it in all of our resolver methods like the user comments method right here where we can access it in

254
00:16:56,540 --> 00:16:58,550
that third argument.

255
00:16:58,550 --> 00:17:03,580
So all of this has set us up for the next video where we're going to continue to refactor.

256
00:17:03,620 --> 00:17:09,200
We're going to take everything on this resolvers object which is the last big thing inside of this file

257
00:17:09,380 --> 00:17:13,550
and we're going to break it out into its own set of folders and files.

258
00:17:13,550 --> 00:17:18,550
I'm really excited to get to that and to finish up this graphical application architecture.

259
00:17:18,560 --> 00:17:21,340
So let's jump right in to the very next video.

