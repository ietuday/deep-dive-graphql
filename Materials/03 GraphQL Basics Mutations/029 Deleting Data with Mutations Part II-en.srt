1
00:00:00,240 --> 00:00:04,400
Now that we have the mutation for deleting a user in place it's going to be your challenge.

2
00:00:04,410 --> 00:00:10,740
In this video to create the mutation for deleting a post now when deleting a post there is still the

3
00:00:10,740 --> 00:00:16,440
concern of relational data that needs to be cleaned up but it's not nearly as complex as with deleting

4
00:00:16,440 --> 00:00:17,240
a user.

5
00:00:17,280 --> 00:00:20,910
We just need to clean up the comments for the post that's getting removed.

6
00:00:20,940 --> 00:00:24,360
Up above let's go ahead and talk about what exactly I'd like you to do.

7
00:00:24,450 --> 00:00:29,670
I have the challenge comments for this one right here and remember in the end of the day the big picture

8
00:00:29,670 --> 00:00:33,780
goal is to set up a mutation that deletes a post.

9
00:00:33,780 --> 00:00:36,110
Step one is to define the mutation.

10
00:00:36,210 --> 00:00:41,490
Now this mutation needs to take in the post ID the idea of the post we're trying to delete and it should

11
00:00:41,490 --> 00:00:47,700
also return the deleted post much like delete user return the deleted user.

12
00:00:47,700 --> 00:00:53,280
Step two is to define the resolver for the nutation This is where most of your time is going to be spent.

13
00:00:53,280 --> 00:00:57,050
There are a few things to keep in mind related to this resolver method.

14
00:00:57,060 --> 00:01:02,160
First up you want to check that the post that they're trying to delete actually exists.

15
00:01:02,160 --> 00:01:06,730
If it does not exist you want to throw an error saying something like post not bound.

16
00:01:06,930 --> 00:01:13,410
You also want to remove that post and actually return the post object as the return value for the resolver

17
00:01:13,680 --> 00:01:16,140
to actually fulfill the value we've set up.

18
00:01:16,140 --> 00:01:18,540
That should come back from the operation.

19
00:01:18,540 --> 00:01:24,150
The last thing to do inside of this mutation resolver is to actually remove all of the comments belonging

20
00:01:24,150 --> 00:01:25,110
to the post.

21
00:01:25,170 --> 00:01:30,090
If we are going to remove a given post like this one we do not need to delete the user.

22
00:01:30,090 --> 00:01:36,480
That doesn't make sense but we do need to delete all of the comments associated with that post regardless

23
00:01:36,480 --> 00:01:40,100
of who created them whether it was the Post author or someone else.

24
00:01:40,110 --> 00:01:46,240
All those comments need to go where the post property value is in this case 11.

25
00:01:46,350 --> 00:01:49,770
Now that brings us to the final step which is to test your work.

26
00:01:49,770 --> 00:01:51,780
Run a brand new mutation.

27
00:01:52,140 --> 00:01:55,140
Mutation and not queery to delete a post.

28
00:01:55,230 --> 00:02:00,300
Then verify that the actual post and all of its comments have been removed.

29
00:02:00,450 --> 00:02:03,470
Once again take as much time as you need to knock this one out.

30
00:02:03,510 --> 00:02:05,360
When you're done test your work.

31
00:02:05,370 --> 00:02:13,090
Pause the video come back in click play when you're ready to look at the solution.

32
00:02:13,110 --> 00:02:14,040
How did you do.

33
00:02:14,040 --> 00:02:19,130
Let's go ahead and kick things off with step 1 which is to just define that mutation.

34
00:02:19,230 --> 00:02:23,660
You want to take in the post ID and we want to get that deleted post back.

35
00:02:23,700 --> 00:02:25,380
So down below we have our type.

36
00:02:25,400 --> 00:02:28,690
Daffs we are going to set that up anywhere works.

37
00:02:28,710 --> 00:02:36,190
I'm just going to keep things organized putting delete post right after Create post.

38
00:02:36,220 --> 00:02:40,280
Now we want to take in just that one argument the ID of the post to remove.

39
00:02:40,290 --> 00:02:46,120
Which will be non-IT nullable you have to provide it and will also set up the non nullable return value.

40
00:02:46,150 --> 00:02:48,910
You are going to get a post back.

41
00:02:49,000 --> 00:02:49,710
Perfect.

42
00:02:49,810 --> 00:02:51,420
So that is it for step 1.

43
00:02:51,430 --> 00:02:53,650
We're now going to move on to Step 2.

44
00:02:53,650 --> 00:02:56,520
Actually creating that resolver function.

45
00:02:56,560 --> 00:03:04,420
So down below we have all of our mutations create user delete user than we have create post right after

46
00:03:04,430 --> 00:03:05,280
Create post.

47
00:03:05,300 --> 00:03:08,010
I am going to set up delete post.

48
00:03:08,210 --> 00:03:09,950
We're going to have all of those arguments.

49
00:03:09,950 --> 00:03:11,570
We got parent.

50
00:03:11,780 --> 00:03:20,060
We have args we have a context we have info and inside of this method we have to go through those steps

51
00:03:20,120 --> 00:03:25,610
and the first thing we're going to do is try to verify that the post exists and I'm going to do this

52
00:03:25,700 --> 00:03:28,000
exactly the same way I did it up above.

53
00:03:28,010 --> 00:03:33,350
We're going to start by fetching its index using find index will throw an error if we don't find one.

54
00:03:33,380 --> 00:03:36,950
Otherwise we'll actually move through the deletion process.

55
00:03:37,010 --> 00:03:38,820
So let's kick things off right here.

56
00:03:38,870 --> 00:03:45,950
Konst post index is going to get the job done and once again I will be using the find index method.

57
00:03:45,950 --> 00:03:47,750
This time though on the Post's array.

58
00:03:47,770 --> 00:03:53,160
So post-START find index and we are going to pass in that callback function.

59
00:03:53,180 --> 00:03:56,570
We get the individual post and we find a match when we return it.

60
00:03:56,580 --> 00:04:05,420
True we're going to return true if the posts ID so post dot ID matches up with args ID the ID of the

61
00:04:05,420 --> 00:04:07,310
post they want to delete.

62
00:04:07,400 --> 00:04:11,790
Now we can actually set up our if statement to throw an error if no post was found.

63
00:04:11,810 --> 00:04:18,250
If and we'll be checking if Post index equals minus one.

64
00:04:18,260 --> 00:04:23,710
If it does equal minus one then we know we have not found a post and we want to throw an error throw.

65
00:04:23,740 --> 00:04:25,360
New error with a message.

66
00:04:25,370 --> 00:04:26,830
Something along the lines of.

67
00:04:26,830 --> 00:04:29,860
Post not found would be clear enough.

68
00:04:29,900 --> 00:04:34,010
Now we can move on to the next steps we have to complete inside of delete post.

69
00:04:34,010 --> 00:04:39,560
We have to actually delete the post but we also have to delete all of the comments associated with that

70
00:04:39,560 --> 00:04:40,340
post.

71
00:04:40,340 --> 00:04:44,990
Let's start by deleting the post itself using Once again the splice array method.

72
00:04:44,990 --> 00:04:53,150
So right here I'm going to create a variable called deleted posts much like we did above for deleted

73
00:04:53,180 --> 00:04:59,030
comments right here excuse me deleted users then we're going to set this equal to and we're going to

74
00:04:59,030 --> 00:05:00,950
call posts dot splice.

75
00:05:01,040 --> 00:05:04,210
So I want to remove some items from that Post's array.

76
00:05:04,340 --> 00:05:05,620
I already have the index.

77
00:05:05,630 --> 00:05:08,420
I want to start at in the post index variable.

78
00:05:08,420 --> 00:05:10,760
So I'll just reference that.

79
00:05:10,820 --> 00:05:13,280
The second argument and the number of items I want to remove.

80
00:05:13,300 --> 00:05:19,360
I just want to remove one now and the end of the day we are going to return the first and only item

81
00:05:19,360 --> 00:05:20,210
in this array.

82
00:05:20,290 --> 00:05:26,980
So right here return deleted posts grabbing the first item by its index 0.

83
00:05:27,190 --> 00:05:32,560
But we're not quite done yet because we still have to delete old comments belonging to that post that

84
00:05:32,560 --> 00:05:33,520
we just removed.

85
00:05:33,520 --> 00:05:38,590
So right here we're going to set comments equal to a brand new value the value that will come back from

86
00:05:38,590 --> 00:05:43,190
comments dot filter and we're going to pass in our filter callback function.

87
00:05:43,240 --> 00:05:45,430
We get access to the individual comment.

88
00:05:45,490 --> 00:05:51,010
It's our job to return true if we want to keep it and false otherwise we're going to return true.

89
00:05:51,130 --> 00:05:57,270
When the comments don't post property is not equal to the actual post.

90
00:05:57,310 --> 00:05:58,700
We just deleted args.

91
00:05:58,750 --> 00:06:01,290
ID is where we can get that ID.

92
00:06:01,330 --> 00:06:07,360
So this is going to return true for comments not belonging to this post meaning they'll be kept in the

93
00:06:07,360 --> 00:06:08,460
array which is good.

94
00:06:08,500 --> 00:06:12,660
It's going to return false for comments belonging to the deleted post which is great.

95
00:06:12,670 --> 00:06:16,840
Those ones are going to get removed now that we have all of this in place.

96
00:06:16,930 --> 00:06:19,690
We can actually save this file and test our work.

97
00:06:19,690 --> 00:06:24,790
We can move on to Step 3 and verify that all the code we wrote is actually working.

98
00:06:24,850 --> 00:06:28,270
Up above let's go ahead and pick which post we want to remove.

99
00:06:28,270 --> 00:06:32,000
I'm going to remove this post right here with the idea of 11.

100
00:06:32,110 --> 00:06:34,370
That should remove this post from the array.

101
00:06:34,390 --> 00:06:39,720
It shouldn't touch the users or Ray at all but it should indeed touch the comments array.

102
00:06:39,910 --> 00:06:42,460
Removing any comments made on this post.

103
00:06:42,520 --> 00:06:44,180
We just have one right here.

104
00:06:44,320 --> 00:06:45,660
This did not work.

105
00:06:45,760 --> 00:06:46,500
That should be not.

106
00:06:46,510 --> 00:06:48,250
Not no but I'll just leave it there.

107
00:06:48,430 --> 00:06:54,280
This one should indeed get removed since it belongs to the post that I'm going to end up deleting.

108
00:06:54,530 --> 00:06:58,530
All right let's go ahead and jump into graphical playground and get this done.

109
00:06:58,540 --> 00:07:00,320
I'm going to create a new tab.

110
00:07:00,460 --> 00:07:02,840
We're going to set up our mutation.

111
00:07:03,070 --> 00:07:08,690
We'll be using the new delete post operation passing in the ID.

112
00:07:08,810 --> 00:07:11,710
I am willing to delete the post with the ID of 11.

113
00:07:11,740 --> 00:07:13,510
This guy right here.

114
00:07:13,510 --> 00:07:18,520
Now we can actually go ahead and set up those curly braces and the selection set for this one will just

115
00:07:18,520 --> 00:07:19,500
be the ID.

116
00:07:19,510 --> 00:07:22,330
I'll describe the idea of the post that was removed.

117
00:07:22,450 --> 00:07:24,820
If I go ahead and run this operation what do I get.

118
00:07:24,820 --> 00:07:27,100
I get a successful operation.

119
00:07:27,130 --> 00:07:28,860
If I were to run it a second time.

120
00:07:28,990 --> 00:07:35,380
You'll notice the second time it fails since there is no longer a post without ID which is also great.

121
00:07:35,380 --> 00:07:41,320
We can verify that things were deleted correctly including the comments by running our posts and comments

122
00:07:41,560 --> 00:07:42,400
queries.

123
00:07:42,400 --> 00:07:44,620
I'm going to start with posts if I run this.

124
00:07:44,620 --> 00:07:45,410
What do I get.

125
00:07:45,460 --> 00:07:50,080
I get graphed UL 101 and programming music as the only posts that exist.

126
00:07:50,170 --> 00:07:50,980
That's great.

127
00:07:50,980 --> 00:07:53,420
The post with the idea of 11 was deleted.

128
00:07:53,500 --> 00:07:57,450
If I go ahead and run the comments query what do I get back I get back.

129
00:07:57,450 --> 00:07:58,780
Three comments.

130
00:07:58,780 --> 00:08:04,090
The one that saying that the actual solution didn't work for them has been deleted because that was

131
00:08:04,090 --> 00:08:07,110
associated with the post that is now removed.

132
00:08:07,270 --> 00:08:07,990
So there we go.

133
00:08:07,990 --> 00:08:11,670
Everything is done for the delete post mutation.

134
00:08:11,780 --> 00:08:16,690
That brings us to what I'd like to do to wrap up this video which is one more challenge requiring you

135
00:08:16,750 --> 00:08:20,420
to set up a much easier delete comment mutation.

136
00:08:20,560 --> 00:08:25,630
Right here the big picture goal is to set up a mutation for deleting a comment with this one.

137
00:08:25,630 --> 00:08:28,330
There is no need to worry about related data.

138
00:08:28,330 --> 00:08:33,700
You can just delete the comment don't have to touch that user who created the comment and you don't

139
00:08:33,700 --> 00:08:37,020
have to touch the post that the comment belongs to either.

140
00:08:37,180 --> 00:08:38,780
So step 1 define the mutation.

141
00:08:38,800 --> 00:08:45,550
Take any comment Id return the deleted comment step to define the resolver for that nutation check if

142
00:08:45,550 --> 00:08:46,620
the comment exists.

143
00:08:46,630 --> 00:08:51,550
Otherwise there are an error and then remove and return the comment and step 3.

144
00:08:51,550 --> 00:08:56,620
Test your work by running the mutation to delete the comment and verifying that the comment was removed

145
00:08:56,840 --> 00:08:57,990
by using something like.

146
00:08:58,000 --> 00:08:59,880
Our comments query.

147
00:08:59,950 --> 00:09:02,390
This is exactly what you did last time though.

148
00:09:02,410 --> 00:09:06,900
Slightly easier since there is no concern of relational data.

149
00:09:07,060 --> 00:09:10,880
Take some time to knock this one out when you're done come back and click play

150
00:09:14,160 --> 00:09:14,950
How'd that go.

151
00:09:14,970 --> 00:09:17,040
Let's go ahead and kick things off with step 1.

152
00:09:17,040 --> 00:09:19,090
We're going to define that mutation.

153
00:09:19,230 --> 00:09:24,510
I'm going to put it right below create comment or call delete comment and we're going to set it up to

154
00:09:24,510 --> 00:09:25,930
take just that one argument.

155
00:09:25,950 --> 00:09:31,200
The idea of the item we're trying to delete right here the return value will be removed.

156
00:09:31,230 --> 00:09:33,030
Comment perfect.

157
00:09:33,120 --> 00:09:34,490
That brings us to step 2.

158
00:09:34,500 --> 00:09:39,460
Setting up the resolver method for delete comment that's going to go down here below.

159
00:09:39,480 --> 00:09:46,410
Create comment I'll call delete comment matching up with the operation name we just created and we'll

160
00:09:46,410 --> 00:09:47,700
set up those four arguments.

161
00:09:47,700 --> 00:09:55,380
We got parent args context info and then from here we can actually worry about our functionality.

162
00:09:55,550 --> 00:09:59,510
So step 1 does that comment exist.

163
00:09:59,510 --> 00:10:01,240
We got to figure that out first.

164
00:10:01,250 --> 00:10:04,590
Once again I will be using find index so Konst.

165
00:10:04,730 --> 00:10:05,630
I'm going to call this one.

166
00:10:05,630 --> 00:10:08,180
Comment index equals.

167
00:10:08,180 --> 00:10:09,980
I'll be calling comments dot.

168
00:10:10,040 --> 00:10:15,150
Find index to try to get the index and we will pass in our callback function.

169
00:10:15,170 --> 00:10:19,060
We could access to the individual comment and we're going to consider it a match.

170
00:10:19,070 --> 00:10:25,740
If the comments ID matches up with the argument ID on args I'd be perfect.

171
00:10:25,760 --> 00:10:29,120
Now we can actually perform the check seeing if there was no comment.

172
00:10:29,120 --> 00:10:34,130
So if comment index is indeed equal to minus one.

173
00:10:34,140 --> 00:10:35,080
Then we have a problem.

174
00:10:35,080 --> 00:10:36,940
There is no comment to remove.

175
00:10:36,950 --> 00:10:37,910
So what are we going to do.

176
00:10:37,910 --> 00:10:44,300
We're just going to throw an error throw new error alerting the user along the lines of a comment not

177
00:10:44,720 --> 00:10:46,660
found perfect.

178
00:10:46,670 --> 00:10:50,380
Now all we need to do is return the comment that we actually delete.

179
00:10:50,420 --> 00:10:59,910
So while you splice once again Konst the deleted comments equals I'm going to call comments dot splice.

180
00:10:59,960 --> 00:11:02,920
I'm going to remove starting the following index.

181
00:11:02,930 --> 00:11:07,870
Whatever is stored in comment index and I am going to remove just a single item.

182
00:11:07,970 --> 00:11:10,970
Then we can go ahead and return right here.

183
00:11:10,970 --> 00:11:17,060
The first item in deleted comments deleted comments is only ever going to have a single item inside

184
00:11:17,060 --> 00:11:17,570
of it.

185
00:11:17,570 --> 00:11:19,340
So right here deleted comments.

186
00:11:19,370 --> 00:11:21,000
Accessing it by index.

187
00:11:21,020 --> 00:11:22,190
Perfect.

188
00:11:22,220 --> 00:11:23,550
Now with this in place.

189
00:11:23,630 --> 00:11:27,800
All that's left to do is verify that our code is working as expected.

190
00:11:27,800 --> 00:11:31,210
We can go ahead and knock that out by picking one of the comments to remove.

191
00:11:31,310 --> 00:11:34,720
It doesn't really matter for this example since there's no relational data.

192
00:11:34,730 --> 00:11:35,910
We have to worry about.

193
00:11:35,990 --> 00:11:41,970
I'm going to go ahead and just remove this first comment right here with the ID of 1 0 2.

194
00:11:42,080 --> 00:11:44,660
Let's go ahead and get that done over inside of graph.

195
00:11:44,680 --> 00:11:49,200
You playground will be creating a brand new mutation right here.

196
00:11:49,320 --> 00:11:50,990
A mutation.

197
00:11:51,230 --> 00:11:54,470
I'm going to call this one delete comment.

198
00:11:54,470 --> 00:11:56,530
We're going to pass in that ID.

199
00:11:56,570 --> 00:12:04,870
I already forget the idea I said I'd use 1 0 2 and we'll just ask for the ID of the deleted comment

200
00:12:04,870 --> 00:12:05,880
back.

201
00:12:05,960 --> 00:12:10,670
Now if I go ahead and actually refresh the schema there should be a valid operation and if I run it

202
00:12:10,690 --> 00:12:12,250
any comment should get deleted.

203
00:12:12,260 --> 00:12:14,690
And right here it is indeed removed.

204
00:12:14,780 --> 00:12:20,990
We can verify that we're not just seeing a false positive by running that comments query.

205
00:12:20,990 --> 00:12:23,710
I'm going to run it and do we see 102.

206
00:12:23,720 --> 00:12:24,680
No we do not.

207
00:12:24,680 --> 00:12:27,790
That comment has indeed successfully been removed.

208
00:12:27,920 --> 00:12:28,840
And there we go.

209
00:12:28,850 --> 00:12:32,340
We now have Duleep mutations for all of our data.

210
00:12:32,510 --> 00:12:38,960
We can delete users we can delete posts and we can delete comments and we also have taken into account

211
00:12:38,990 --> 00:12:41,500
the fact that we have a lot of related data here.

212
00:12:41,660 --> 00:12:44,870
So those considerations are taken care of as well.

213
00:12:44,870 --> 00:12:50,190
That brings us to the end of our little two part series on deleting data with mutations.

214
00:12:50,390 --> 00:12:57,250
Now at this point we have one really really really really long file.

215
00:12:57,320 --> 00:12:59,710
And for the moment it hasn't been much of a burden.

216
00:12:59,810 --> 00:13:03,320
But as we continue to add code it's just going to get annoying.

217
00:13:03,440 --> 00:13:09,800
So in the next video we're going to start to explore how we can better structure our projects will be

218
00:13:09,800 --> 00:13:16,430
breaking up this application from one big file to many smaller files with folders and directory structures

219
00:13:16,430 --> 00:13:17,720
to keep us organized.

220
00:13:17,720 --> 00:13:19,220
I'm really excited to get to that.

221
00:13:19,220 --> 00:13:21,990
So let's go ahead and jump right in to the next one.

