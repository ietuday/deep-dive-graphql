1
00:00:00,270 --> 00:00:01,730
Welcome back how do I go.

2
00:00:01,740 --> 00:00:04,320
Who are going to go ahead and move through all four steps.

3
00:00:04,320 --> 00:00:08,160
Step one is to set up all of our types with their scalar fields.

4
00:00:08,160 --> 00:00:10,110
You shouldn't have run into too much trouble there.

5
00:00:10,110 --> 00:00:11,180
Bullets do the process.

6
00:00:11,190 --> 00:00:15,380
Nonetheless I'm going to kick things off with the first one we have our book.

7
00:00:15,540 --> 00:00:18,300
So we have our type book sitting right here.

8
00:00:18,390 --> 00:00:20,820
Then we're going to set up all of the fields for a book.

9
00:00:20,910 --> 00:00:27,720
We are going to have an idea of the ID type and we do have to use at Unique for IDS in a Prisma.

10
00:00:27,720 --> 00:00:28,600
Excellent.

11
00:00:28,620 --> 00:00:31,310
And from there we can set up the book's title.

12
00:00:31,740 --> 00:00:37,630
I'll set that up as a non nullable string as shown in the graphic then we can move on to the author.

13
00:00:37,710 --> 00:00:41,090
Also a non nullable string.

14
00:00:41,280 --> 00:00:47,620
And the last one we're going to have is I s b n that is also going to be a string that must be provided.

15
00:00:47,700 --> 00:00:49,900
So that is it for these scalar fields.

16
00:00:50,010 --> 00:00:55,170
Next up we have our user let's knock out those two fields and we already have one done the only one

17
00:00:55,170 --> 00:01:01,940
we still need is a user name right here user name setting not equal to a string.

18
00:01:01,950 --> 00:01:02,810
Perfect.

19
00:01:02,820 --> 00:01:08,600
I also want to make this unique so I will use at Unique on the users user name field.

20
00:01:08,700 --> 00:01:14,220
The last type we need is our review type we have an ID and a rating field which are both required and

21
00:01:14,220 --> 00:01:15,570
an optional text field.

22
00:01:15,570 --> 00:01:19,950
So let's set all three up over here type review.

23
00:01:20,550 --> 00:01:21,960
Setting up first ID.

24
00:01:21,960 --> 00:01:26,960
There's nothing special there will be setting it up with our unique directive.

25
00:01:26,960 --> 00:01:28,880
Next up we're going to have our text.

26
00:01:28,880 --> 00:01:32,480
This is indeed going to be a string but it's going to be a nullable string.

27
00:01:32,480 --> 00:01:38,120
So it's perfectly fine if you don't want to provide any sort of text based reason for why you're leaving

28
00:01:38,120 --> 00:01:38,980
a review.

29
00:01:39,260 --> 00:01:45,790
After that we are going to have the orating field and this will indeed be a required integer and there's

30
00:01:45,800 --> 00:01:49,760
no need to worry about determining if the end is between 1 or 5 for the moment.

31
00:01:49,760 --> 00:01:52,900
That wasn't the point of this particular challenge.

32
00:01:52,910 --> 00:01:54,880
So from here we have Step 1 done.

33
00:01:54,980 --> 00:01:56,450
We've defined are three types.

34
00:01:56,480 --> 00:02:00,290
And we set up all of their scalar fields as shown in the visualization.

35
00:02:00,290 --> 00:02:04,120
From there we want to configure the relationship between the types.

36
00:02:04,160 --> 00:02:08,180
So I want revues book author and reviews all set up.

37
00:02:08,210 --> 00:02:10,510
Let's go ahead and move from top to bottom.

38
00:02:10,550 --> 00:02:17,390
Starting with book so book should be able to link to all of the reviews for that book using a revues

39
00:02:17,420 --> 00:02:18,200
field.

40
00:02:18,200 --> 00:02:23,480
This is going to be an array like we've done before and the individual elements in the array will just

41
00:02:23,480 --> 00:02:25,160
be individual reviews.

42
00:02:25,190 --> 00:02:27,170
Nothing too shocking there.

43
00:02:27,170 --> 00:02:29,230
Next up we have the user.

44
00:02:29,330 --> 00:02:32,160
Now the user also has a link to reviews.

45
00:02:32,160 --> 00:02:34,720
So right here we have to configure that as well.

46
00:02:34,730 --> 00:02:41,810
We're going to have reviews as an array and the elements for that will also be of the review type.

47
00:02:41,930 --> 00:02:48,560
And that brings us to the last type we have review review needs to link to both the book and to the

48
00:02:48,560 --> 00:02:49,040
user.

49
00:02:49,040 --> 00:02:55,580
So right here we are going to set up a book field which will link to the book and then we are going

50
00:02:55,580 --> 00:03:01,070
to set up an author field or maybe you called it user or something similar linking to the user that

51
00:03:01,070 --> 00:03:02,810
actually left the review.

52
00:03:03,110 --> 00:03:10,130
Now I mentioned that I also wanted you to use that at relation directive to set up a relationship between

53
00:03:10,130 --> 00:03:13,990
all of these things and configure undelete to cascade.

54
00:03:14,000 --> 00:03:17,780
So when a book gets deleted all of the reviews for that book should go away.

55
00:03:17,780 --> 00:03:24,360
And when a user gets deleted all of the reviews for that user should end up getting deleted as well.

56
00:03:24,410 --> 00:03:28,580
I'm going to go ahead and kick things off right here with the reviews field for book.

57
00:03:28,640 --> 00:03:33,470
All right here at in relation we are going to set up those arguments.

58
00:03:33,480 --> 00:03:35,300
We're going to provide both name.

59
00:03:35,360 --> 00:03:40,850
Setting that equal to a string and we're going to provide undelete setting that equal to in this particular

60
00:03:40,850 --> 00:03:44,360
case cascade because that is the behavior we're looking for.

61
00:03:44,540 --> 00:03:46,570
And we can use whatever name we like.

62
00:03:46,580 --> 00:03:54,110
I'm going to go ahead and use review to book perfect now that we have that in place we can move on to

63
00:03:54,110 --> 00:03:58,500
the next relational field we have which is the reviews field on the user.

64
00:03:58,520 --> 00:04:02,270
Right here something very similar at relation.

65
00:04:02,310 --> 00:04:07,530
We're going to pass in those arguments and we can use a name or something along the lines of review

66
00:04:07,620 --> 00:04:11,700
to user then we're going to pass in on and delete.

67
00:04:11,700 --> 00:04:15,410
And for this one we also want to configure it to cascade delete.

68
00:04:15,450 --> 00:04:20,460
So if a user does get deleted We also want to remove any of their reviews.

69
00:04:20,550 --> 00:04:23,760
Now Dambulla we can configure the review type itself.

70
00:04:23,760 --> 00:04:26,550
We have two fields to configure book and author.

71
00:04:26,550 --> 00:04:31,470
Both of these are going to use set Nall as opposed to cascade.

72
00:04:31,470 --> 00:04:36,630
If we delete a review I do not want to remove the book and I do not want to remove the author so at

73
00:04:36,630 --> 00:04:37,640
relation.

74
00:04:38,070 --> 00:04:41,040
Setting that up passing in a name value.

75
00:04:41,040 --> 00:04:45,090
Now in this case we already have the other side of this relationship set up.

76
00:04:45,090 --> 00:04:48,730
We have that book up above and I called it review to book.

77
00:04:48,730 --> 00:04:49,660
So right here.

78
00:04:49,980 --> 00:04:51,300
Review 2 book.

79
00:04:51,330 --> 00:04:52,900
Matching up exactly.

80
00:04:52,920 --> 00:04:54,440
Then we provide on delete.

81
00:04:54,510 --> 00:04:58,640
Setting this particular one equal to set underscore null.

82
00:04:58,680 --> 00:04:59,500
Excellent.

83
00:04:59,640 --> 00:05:02,550
Then we're going to do basically the same thing below with a different name.

84
00:05:02,580 --> 00:05:09,170
So at relation passing in a name setting the name equal to the name we have right here that is review

85
00:05:10,430 --> 00:05:17,660
into a user and then providing are on delete value on delete for this particular case will also be set

86
00:05:18,200 --> 00:05:19,980
Knol perfect.

87
00:05:20,000 --> 00:05:22,510
So this actually wraps up step two.

88
00:05:22,640 --> 00:05:27,980
We have everything done inside of data model Dom graft UL and we can go ahead and deploy our changes.

89
00:05:27,980 --> 00:05:35,180
So down below all we have to do is run Prisma deploy from our Prisma review Web site directory.

90
00:05:35,240 --> 00:05:36,770
I'm going to fire that command off.

91
00:05:36,770 --> 00:05:42,410
This is going to make all of the necessary changes to our data store and once it's done we can move

92
00:05:42,410 --> 00:05:45,120
on to Step Four and actually test things out.

93
00:05:45,280 --> 00:05:45,830
All right.

94
00:05:45,830 --> 00:05:46,890
Deployment done.

95
00:05:46,970 --> 00:05:51,310
Let's go ahead and verify that things are working over here inside of graft.

96
00:05:51,440 --> 00:05:57,790
Playground at forward slash revues forward slash default we should be able to see our new schema.

97
00:05:57,800 --> 00:05:59,330
I'm going to refresh the schema.

98
00:05:59,330 --> 00:06:05,630
Crack open that tab and now we have all of our queries mutations and subscriptions related to books

99
00:06:05,960 --> 00:06:07,720
users and reviews.

100
00:06:07,820 --> 00:06:10,640
Let's actually use them to get something meaningful done.

101
00:06:10,730 --> 00:06:16,130
First up as mentioned I'm going to create a book so down below I have a create book mutation which I

102
00:06:16,130 --> 00:06:18,010
can use to get that done.

103
00:06:18,020 --> 00:06:22,460
Now I know that with the create both mutation I'm going to have to pass in all of the data necessary

104
00:06:22,460 --> 00:06:23,210
for the book.

105
00:06:23,210 --> 00:06:28,220
So in this case that would be my title my author and my ISBN number and I get the book back.

106
00:06:28,220 --> 00:06:33,110
So let's go ahead and use that over here for the first tab we're going to set up a mutation.

107
00:06:33,470 --> 00:06:39,390
We'll be using create book passing in all of the data necessary on the data argument.

108
00:06:39,530 --> 00:06:41,920
I'm going to pass in a title for the book.

109
00:06:41,960 --> 00:06:44,360
Let me go ahead and pick a book from my shelf.

110
00:06:44,360 --> 00:06:45,680
I'll go ahead and use.

111
00:06:45,680 --> 00:06:50,900
Rest a book about taking breaks and working at a reasonable pace as opposed to burning the midnight

112
00:06:50,960 --> 00:06:52,020
oil.

113
00:06:52,040 --> 00:06:54,190
Now this book was written by an author.

114
00:06:54,230 --> 00:06:59,590
So let's set up the author field as well the author for this one is Alex Pang.

115
00:06:59,800 --> 00:07:02,460
And we're also going to add in the ISBN number.

116
00:07:02,460 --> 00:07:06,040
Now I don't know what it is and I'm not going to look it up so let's just use ABC.

117
00:07:06,040 --> 00:07:07,450
One two three.

118
00:07:07,450 --> 00:07:08,350
Perfect.

119
00:07:08,350 --> 00:07:13,470
We can also provide a selection set getting some information back about the book that was created.

120
00:07:13,630 --> 00:07:15,770
I'm just going to grab the idea.

121
00:07:16,450 --> 00:07:21,000
The title The author and I will also grab the ISBN.

122
00:07:21,190 --> 00:07:25,750
We could also choose to grab the reviews but remember there aren't going to be any reviews since the

123
00:07:25,750 --> 00:07:30,210
book is getting created right now I am going to grab that though just to prove the point.

124
00:07:30,250 --> 00:07:36,500
I'll grab the ID for each review the text fields for each review and the rating for each one.

125
00:07:36,700 --> 00:07:41,650
Now if I fire that off what happens while the book does indeed get created and as expected we have our

126
00:07:41,650 --> 00:07:42,500
ID.

127
00:07:42,550 --> 00:07:48,370
Our other scalar fields and we have reviews as an empty array since no reviews had been created on the

128
00:07:48,370 --> 00:07:49,550
book just yet.

129
00:07:49,810 --> 00:07:54,300
Next up let's add some users into the mix using the create user mutation.

130
00:07:54,430 --> 00:07:57,460
So I'm going to use that to add a couple of different users.

131
00:07:57,460 --> 00:08:02,500
Once again we get the user back as the response value and we pass in as the data.

132
00:08:02,530 --> 00:08:07,030
Just the user name it's the only field necessary to create a user.

133
00:08:07,090 --> 00:08:09,450
I'm going to create a new tab to knock this out.

134
00:08:09,640 --> 00:08:10,840
We have a mutation.

135
00:08:11,260 --> 00:08:14,020
We'll be using create a user over here.

136
00:08:14,140 --> 00:08:19,570
We're going to set up that data argument passing in the user name the user name can be anything in the

137
00:08:19,570 --> 00:08:20,600
world we like.

138
00:08:20,620 --> 00:08:24,430
I am going to use a sleepy guy as the first user.

139
00:08:24,430 --> 00:08:26,910
And now we can move on to our selection set.

140
00:08:27,060 --> 00:08:32,590
So right here I can grab the ID and I can grab the user name.

141
00:08:32,590 --> 00:08:33,380
Perfect.

142
00:08:33,580 --> 00:08:37,450
So I am going to fire off this mutation to create that first user.

143
00:08:37,450 --> 00:08:40,150
And I'm also going to create a second user.

144
00:08:40,180 --> 00:08:42,100
I'll go ahead and have this one be.

145
00:08:42,100 --> 00:08:43,450
Sleepy girl.

146
00:08:43,630 --> 00:08:44,410
Perfect.

147
00:08:44,410 --> 00:08:47,790
Now we have two users in the database and we have one book.

148
00:08:47,830 --> 00:08:52,100
The last thing left to do in terms of creating data is to create some reviews.

149
00:08:52,120 --> 00:08:54,370
So let's knock that out as well.

150
00:08:54,370 --> 00:08:57,270
Over in the schema we can figure out how to use this.

151
00:08:57,270 --> 00:09:03,280
If you can't guess based off of the structure of past requests by going to the Create review mutation

152
00:09:03,370 --> 00:09:07,360
right here we have to pass some information on that data argument.

153
00:09:07,360 --> 00:09:13,930
We have to pass in not just the optional text and required rating but also of the connection to the

154
00:09:13,930 --> 00:09:16,080
existing book and author.

155
00:09:16,240 --> 00:09:22,120
So for both book and author we can choose to create the entity or connect it to an existing one.

156
00:09:22,120 --> 00:09:27,670
I am obviously going to connect to our existing users in our existing book.

157
00:09:27,670 --> 00:09:31,030
Let's go ahead and actually knock all of that out in a brand new tab.

158
00:09:31,030 --> 00:09:34,790
I'm going to perform a nother mutation our last mutation tab.

159
00:09:34,960 --> 00:09:40,990
This one will be using create review which we just created and we are going to set up the arguments

160
00:09:40,990 --> 00:09:41,710
here.

161
00:09:41,770 --> 00:09:42,670
So we need data.

162
00:09:42,670 --> 00:09:45,030
And this one is going to be a bit more complex.

163
00:09:45,100 --> 00:09:49,170
I can provide a text feel like it was a good read.

164
00:09:52,230 --> 00:09:54,510
Then we can choose to provide a rating.

165
00:09:54,510 --> 00:09:56,320
Actually we have to provide a rating.

166
00:09:56,340 --> 00:09:58,920
I'll go ahead and rate this one five stars.

167
00:09:58,950 --> 00:10:05,360
And from here we need to link in the book we're reviewing and the user who's leaving the review.

168
00:10:05,670 --> 00:10:08,130
So I already have the book idea sitting over here.

169
00:10:08,130 --> 00:10:12,930
I can just copy that to the clipboard and bring it over to create review and link that up.

170
00:10:12,930 --> 00:10:17,550
I'm going to add book in this case we are connecting to an existing book.

171
00:10:17,570 --> 00:10:22,140
So I use connect and I am connecting by the only thing that makes that book unique it's ID.

172
00:10:22,280 --> 00:10:25,190
So right here I'll paste the idea in.

173
00:10:25,220 --> 00:10:30,260
Next up we can go ahead and actually specify alongside of book the user.

174
00:10:30,260 --> 00:10:32,840
So right here that is known as author.

175
00:10:32,850 --> 00:10:38,450
We are going to provide connect to connect to an existing author and we are going to provide the ID

176
00:10:38,450 --> 00:10:39,330
for that author.

177
00:10:39,380 --> 00:10:42,430
Let's go ahead and actually grab one over in the other tab.

178
00:10:42,440 --> 00:10:47,780
I have the idea for sleepy gal so I'll copy that to the clipboard and use that when I create this first

179
00:10:47,780 --> 00:10:48,680
review.

180
00:10:48,680 --> 00:10:49,800
I'm going to paste that in.

181
00:10:49,810 --> 00:10:50,510
And perfect.

182
00:10:50,510 --> 00:10:51,650
Now we're all done.

183
00:10:51,650 --> 00:10:56,950
We can add a selection set on it to grab some information about the review we're creating.

184
00:10:56,990 --> 00:10:59,010
I'm just going to grab the ID.

185
00:10:59,270 --> 00:11:02,910
I'll grab the text and I'll also grab the rating.

186
00:11:02,910 --> 00:11:04,470
Perfect.

187
00:11:04,520 --> 00:11:10,070
If we fire off this operation we should see that our review was indeed left successfully.

188
00:11:10,220 --> 00:11:15,320
And now what I want to do is leave a nother review by the other user.

189
00:11:15,320 --> 00:11:18,180
Now I don't remember what the other users I.D. was.

190
00:11:18,200 --> 00:11:21,700
So I can always take advantage of something like the user's query.

191
00:11:21,830 --> 00:11:29,300
I'm going to query for all users grabbing the ID and the user name for each if I fire that off.

192
00:11:29,300 --> 00:11:32,350
I have the ID for a sleepy guy right here.

193
00:11:32,390 --> 00:11:35,840
I can bring that I.D. over to my Create view mutation.

194
00:11:35,990 --> 00:11:39,100
I'm going to swap out the old author ID with the new one.

195
00:11:39,200 --> 00:11:42,470
And for this review I'm going to go ahead and toss it four stars.

196
00:11:42,470 --> 00:11:48,460
And I'm not going to provide any reason for why I'm giving it four stars if I fire off this operation.

197
00:11:48,470 --> 00:11:49,400
What do I get back.

198
00:11:49,400 --> 00:11:51,910
I get back exactly what I would have expected.

199
00:11:51,920 --> 00:11:54,330
I have all of the information about my new review.

200
00:11:54,440 --> 00:11:57,100
The text value is indeed null which is OK.

201
00:11:57,140 --> 00:11:58,310
None was provided.

202
00:11:58,310 --> 00:12:04,080
And that's fine because the data model allows that it's OK to leave the text off.

203
00:12:04,100 --> 00:12:09,920
So from here all I want to do is actually verify that one everything got created successfully then I'm

204
00:12:09,920 --> 00:12:14,520
going to delete stuff and make sure all of our cascade deletions are working.

205
00:12:14,840 --> 00:12:23,540
So for example what I can do is create another query I'm going to grab all of the books for each book.

206
00:12:23,540 --> 00:12:24,590
What am I going to do.

207
00:12:24,590 --> 00:12:28,200
I will grab its ID its title.

208
00:12:28,270 --> 00:12:34,980
Also grab the author and the ISBN and I'm going to grab all of its related data as well.

209
00:12:35,070 --> 00:12:40,440
So I am going to grab the reviews for the book and for each review I am going to get all of these scalar

210
00:12:40,440 --> 00:12:43,430
fields ID the optional text and the rating.

211
00:12:43,590 --> 00:12:47,500
And I'm also going to grad the user name of the person who left the review.

212
00:12:47,520 --> 00:12:55,140
So right here we are going to grab on each review the author field and in that case I will grab my ID

213
00:12:55,350 --> 00:12:56,610
and username.

214
00:12:56,640 --> 00:13:01,950
So that is quite the operation but its going to allow us to see everything that was created and if I

215
00:13:01,950 --> 00:13:03,930
actually fire that off what do we get.

216
00:13:04,050 --> 00:13:08,350
We get our one book back we have the book rest by Alex paying.

217
00:13:08,400 --> 00:13:12,850
It looks like I actually forgot to leave the title and the title is just head and down below there it

218
00:13:12,850 --> 00:13:13,230
is.

219
00:13:13,300 --> 00:13:15,210
There is the ISBN as well.

220
00:13:15,330 --> 00:13:19,490
Then we have that revues property and we have our two reviews the first one.

221
00:13:19,500 --> 00:13:22,440
It was a good read five stars by sleepy gal.

222
00:13:22,530 --> 00:13:27,360
The second one no reason why it was a four star rating by sleepy guy.

223
00:13:27,390 --> 00:13:28,130
Perfect.

224
00:13:28,140 --> 00:13:30,330
Let's wrap things up by deleting some data.

225
00:13:30,540 --> 00:13:34,690
We're going to delete one of those users and make sure its review goes away.

226
00:13:34,800 --> 00:13:39,080
Then we're going to delete the book and make sure the other review goes away.

227
00:13:39,270 --> 00:13:44,290
I'll start by deleting the sleepy guy user so I have his ID right here.

228
00:13:44,460 --> 00:13:48,870
I'm going to grab that and over here I will use the delete user mutation.

229
00:13:48,870 --> 00:13:56,790
Delete user we are going to pass in the necessary arguments which for deleting is just where we can

230
00:13:56,790 --> 00:14:01,160
delete a user by its user name which is unique or it's ID which is unique.

231
00:14:01,170 --> 00:14:09,690
I am going to delete it by its ID and I will just grab the ID and the user name of the person I've removed.

232
00:14:09,870 --> 00:14:15,030
If I fire this operation off I can see right here that the user was indeed deleted.

233
00:14:15,030 --> 00:14:20,780
And if I refresh my request over here I should see there's only one review for the book.

234
00:14:20,880 --> 00:14:22,130
Right here I fire it off.

235
00:14:22,220 --> 00:14:28,670
And now there is only one review of both the user and that user's reviews were correctly deleted.

236
00:14:28,710 --> 00:14:33,360
The last thing I want to do is delete the book and make sure the last review gets removed.

237
00:14:33,510 --> 00:14:37,980
So I'm going to set up one more tab mutation.

238
00:14:38,010 --> 00:14:45,450
I'm going to delete the book we're going to pass in all of the necessary arguments where as an object

239
00:14:45,630 --> 00:14:51,120
where we provide the ID of the book to remove I have that I.D. sitting right in the output over here

240
00:14:52,050 --> 00:14:53,830
I'll pass that in as the value.

241
00:14:53,940 --> 00:14:59,340
And then in terms of the response I'm just going to grab the ID and the title of the book that was deleted

242
00:14:59,500 --> 00:15:03,790
and if I fire this operation off right here I can see the book was deleted.

243
00:15:03,930 --> 00:15:08,310
The last thing to do is make sure there are now zero reviews.

244
00:15:08,310 --> 00:15:12,570
There are plenty of ways I could test that I can use P.G. admin or create a query.

245
00:15:12,600 --> 00:15:14,710
I'm going to go with the query approach.

246
00:15:14,760 --> 00:15:17,780
I will set up a query operation right here.

247
00:15:17,910 --> 00:15:21,960
We are just going to ask for the reviews and for each review.

248
00:15:22,020 --> 00:15:23,570
All I want is the ID.

249
00:15:23,580 --> 00:15:26,820
So right here ID I fire that off and what do I get back.

250
00:15:26,820 --> 00:15:31,230
I get back an empty array because there are no reviews in the database.

251
00:15:31,260 --> 00:15:32,170
So there we go.

252
00:15:32,190 --> 00:15:37,830
This challenge was designed to get you thinking about how you might model other applications using Prisma

253
00:15:37,830 --> 00:15:39,840
or more generally using graphs.

254
00:15:39,900 --> 00:15:45,150
Well we can model whenever we want maybe I'm creating a Web site for managing flights.

255
00:15:45,150 --> 00:15:47,300
I can model all of that with graphs.

256
00:15:47,340 --> 00:15:50,680
Well I can have a flight type I can have a customers type.

257
00:15:50,760 --> 00:15:55,740
I might even have a type for staff members who are going to be on that flight whether they're pilots

258
00:15:55,950 --> 00:15:57,610
or whether they are stewardesses.

259
00:15:57,690 --> 00:16:01,440
So all sorts of that stuff can be modeled using what we have here.

260
00:16:01,440 --> 00:16:06,860
You can also model something like Air B and B I can have rooms I can have reviews I can have bookings

261
00:16:06,870 --> 00:16:08,030
I can have users.

262
00:16:08,160 --> 00:16:13,580
All of that can be modeled using type definitions and relationships between those types.

263
00:16:13,580 --> 00:16:14,100
All right.

264
00:16:14,100 --> 00:16:16,900
That's where we're going to stop for this section.

265
00:16:16,920 --> 00:16:22,080
The whole goal of this section was to just get us up and running with Prisma in the next section.

266
00:16:22,110 --> 00:16:27,420
We're actually going to integrate this into our node API and we're going to start focusing on features

267
00:16:27,420 --> 00:16:30,540
like authentication to create that real world app.

268
00:16:30,540 --> 00:16:35,610
We're working towards it for now we can close all of the open files and we can collapse that Prisma

269
00:16:35,640 --> 00:16:37,270
Review Web site directory.

270
00:16:37,380 --> 00:16:41,400
We're not going to be working with that directly for a little while though there might be a challenge

271
00:16:41,400 --> 00:16:44,350
later where I ask you to expand on that.

272
00:16:44,350 --> 00:16:48,840
All right let's jump into the next video which is the section intro for the next section.

