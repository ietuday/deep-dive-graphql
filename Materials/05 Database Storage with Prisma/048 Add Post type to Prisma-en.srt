1
00:00:00,210 --> 00:00:04,840
In the last video you saw just how important the data model got graph you el file is.

2
00:00:04,860 --> 00:00:08,700
This file is used by Prisma to determine two very important things.

3
00:00:08,700 --> 00:00:13,010
First this file is used to determine the database structure.

4
00:00:13,080 --> 00:00:19,110
So I have a user type here and that is the only reason why I have a user table down below on that user

5
00:00:19,110 --> 00:00:24,810
type we've determined we want an idea and a name and that is the only reason I have an ID and a name

6
00:00:24,810 --> 00:00:27,040
field for each user.

7
00:00:27,060 --> 00:00:29,380
Now yes we do have updated and created out.

8
00:00:29,400 --> 00:00:32,850
We'll learn a bit more about those later in the class.

9
00:00:32,850 --> 00:00:39,450
Now the other important thing that this file is used for is for generating the graphs Well API as schema

10
00:00:39,600 --> 00:00:41,550
as we saw all of our queries.

11
00:00:41,550 --> 00:00:46,970
Mutations and subscriptions are all related to users and that's because it's the only type we have to

12
00:00:46,980 --> 00:00:47,570
find.

13
00:00:47,610 --> 00:00:53,010
If we were to define other types we would have other queries mutations and subscriptions for those other

14
00:00:53,010 --> 00:00:54,480
types as well.

15
00:00:54,480 --> 00:00:56,640
So in this video we're going to do two things.

16
00:00:56,640 --> 00:01:03,390
One we're going to make some changes to our user type and two we're going to add together a post type

17
00:01:03,660 --> 00:01:04,680
in the next video.

18
00:01:04,680 --> 00:01:08,430
It will be your challenge to add the comment type.

19
00:01:08,430 --> 00:01:12,100
So let's go ahead and get started by making some changes to the user type.

20
00:01:12,120 --> 00:01:17,640
Now everything we're seeing here was automatically generated as part of the default Prisma project.

21
00:01:17,640 --> 00:01:22,120
Now we do still want a user type in our application but it's missing some fields.

22
00:01:22,230 --> 00:01:27,810
If we go over to schema digraphs Well obviously we're missing posts and comments but we don't even have

23
00:01:27,810 --> 00:01:29,670
those related types set up.

24
00:01:29,670 --> 00:01:34,230
So let's not worry about them for now we'll just worry about our scalar fields.

25
00:01:34,230 --> 00:01:39,840
We already have ID we already have name we don't have email and we don't have age.

26
00:01:39,840 --> 00:01:44,670
Now we're actually going to ditch age at this point age was added to give us a bit more variety using

27
00:01:44,700 --> 00:01:48,100
other types as we explored how graphical works.

28
00:01:48,270 --> 00:01:52,980
But for the final version of this blog app we're not going to track the age for each user though we

29
00:01:52,980 --> 00:01:55,490
definitely will be tracking their e-mails.

30
00:01:55,560 --> 00:02:01,350
And later on in the course we'll be adding on other fields like password as we start to get into authentication.

31
00:02:01,350 --> 00:02:05,210
For now though let's just add that email field into the mix.

32
00:02:05,220 --> 00:02:07,020
So over in data model dot graph.

33
00:02:07,080 --> 00:02:12,400
Well I am going to list email out setting it up as a non nullable string.

34
00:02:13,430 --> 00:02:18,760
We can save the file and now all we need to do is rerun Prisma deploy.

35
00:02:18,830 --> 00:02:21,210
That's going to read the contents of this file.

36
00:02:21,260 --> 00:02:28,220
It is going to update both the database structure and the graph API to work with this brand new field.

37
00:02:28,400 --> 00:02:33,530
So down below we can just run Prisma deploy from inside of our project.

38
00:02:33,560 --> 00:02:34,780
Now here's the catch.

39
00:02:34,880 --> 00:02:39,710
When we run this it's actually going to fail and the error message is going to shed some light on what's

40
00:02:39,710 --> 00:02:40,510
going on.

41
00:02:40,520 --> 00:02:41,500
So we have an error.

42
00:02:41,600 --> 00:02:46,700
The error is of course related to the user the only thing we have and the message is the following.

43
00:02:46,850 --> 00:02:53,490
You are creating a required field but there are already knows present that would violate that constraint.

44
00:02:53,510 --> 00:02:55,500
So it's complaining about email.

45
00:02:55,530 --> 00:02:59,580
We've set up e-mail to be a field that every user has to have.

46
00:02:59,660 --> 00:03:02,050
Now what it says node's really just means data.

47
00:03:02,060 --> 00:03:04,830
It's talking about our existing users.

48
00:03:04,850 --> 00:03:10,340
If I go over to the database it's saying that it can't automatically update this record because it's

49
00:03:10,340 --> 00:03:16,110
not going to be able to add a value for e-mail which means that this user would be invalid for the moment.

50
00:03:16,220 --> 00:03:20,330
We can work around this just by deleting the record and starting from scratch.

51
00:03:20,330 --> 00:03:25,090
So what I'm going to do is delete our one and only user wiping this table out completely.

52
00:03:25,310 --> 00:03:32,090
Then we should be able to rerun Prisma deploy but this time around we should not be getting any errors.

53
00:03:32,090 --> 00:03:37,580
We should actually see that everything went correctly and that even describes all of the changes that

54
00:03:37,580 --> 00:03:38,260
were made.

55
00:03:38,350 --> 00:03:43,820
Right here we can see that one of the changes made to user was that an email field was created and it

56
00:03:43,820 --> 00:03:45,990
has the correct type right here.

57
00:03:46,190 --> 00:03:47,450
Now this means two things.

58
00:03:47,450 --> 00:03:50,970
It means one that our database structure has changed.

59
00:03:51,020 --> 00:03:57,650
If I refreshed the page we can see that email has been added and 2 two it means that our graph QOL API

60
00:03:57,650 --> 00:03:59,130
has changed as well.

61
00:03:59,150 --> 00:04:04,880
If I refreshed the schema here and open up the documentation for create user which we can already see

62
00:04:04,880 --> 00:04:07,670
is currently invalid.

63
00:04:07,820 --> 00:04:09,270
We have our data argument.

64
00:04:09,410 --> 00:04:15,860
This time it does still take name and that is still required but it now also takes email which is also

65
00:04:15,860 --> 00:04:16,660
required.

66
00:04:16,850 --> 00:04:22,040
So the previous create user call we had is no longer valid because there is no e-mail provided.

67
00:04:22,040 --> 00:04:23,990
Let's go ahead and set one up sir right here.

68
00:04:24,020 --> 00:04:26,100
E-mail sending an equal to.

69
00:04:26,240 --> 00:04:30,110
I'm going to use Vikram at example dot com.

70
00:04:30,110 --> 00:04:31,000
Perfect.

71
00:04:31,000 --> 00:04:35,510
Now we can actually go ahead and run this operation and when we do it's going to succeed.

72
00:04:35,510 --> 00:04:38,800
So right here we can see that the new user was created.

73
00:04:38,900 --> 00:04:43,580
Now in that case I didn't ask for their email back which is why I did not get their e-mail.

74
00:04:43,670 --> 00:04:44,710
Well we can always fetch that.

75
00:04:44,720 --> 00:04:47,670
Using the user's query to make sure it's showing up.

76
00:04:47,670 --> 00:04:53,930
So right here for each user I'll grab their id rather name and I'll grab their e-mail if I fire this

77
00:04:53,930 --> 00:04:57,820
one off we can see we have that data showing up which is fantastic.

78
00:04:57,830 --> 00:05:02,040
Now of course over NPG admin We want to make sure things are looking good here.

79
00:05:02,090 --> 00:05:08,030
If I refreshed the page we do have victim at example dot com as the value for our email field.

80
00:05:08,030 --> 00:05:08,980
Perfect.

81
00:05:08,990 --> 00:05:13,910
So with this in place the last thing I want to talk about related to the user is what we have right

82
00:05:13,910 --> 00:05:19,110
here the unique that comes after our ID field definition.

83
00:05:19,190 --> 00:05:21,830
What we have right here is a graph Q El directive.

84
00:05:21,860 --> 00:05:25,520
A directive is a way to modify the behavior of the field.

85
00:05:25,640 --> 00:05:31,490
Now directives are usually something that we need to create and then use but clearly we haven't created

86
00:05:31,490 --> 00:05:33,610
anything called unique in our code.

87
00:05:33,620 --> 00:05:35,900
This one is actually coming from Prisma.

88
00:05:35,960 --> 00:05:40,700
So Prisma provides us with various things to make our life a little bit easier.

89
00:05:40,700 --> 00:05:43,270
It gives us custom types we'll be talking about soon.

90
00:05:43,280 --> 00:05:50,150
It gives us things like directives and more and the unique directive as the name suggests makes a given

91
00:05:50,150 --> 00:05:51,860
field unique.

92
00:05:51,860 --> 00:05:55,330
Now the syntax for this is the following after the field definition.

93
00:05:55,340 --> 00:05:57,300
Obviously we don't need a directive.

94
00:05:57,320 --> 00:06:02,160
But if we want to use one we start with the at sign then we provide the directive name.

95
00:06:02,160 --> 00:06:08,390
In this case providing unique directives as we'll see later can also take arguments unique does not.

96
00:06:08,390 --> 00:06:12,820
So we're going to leave those off just setting it up exactly like we had it before.

97
00:06:12,830 --> 00:06:18,640
Now what does this do well makes sure that for every user out there none of them have the same idea.

98
00:06:18,650 --> 00:06:23,960
So we want to make sure the ID is unique for all users stored in the database.

99
00:06:23,960 --> 00:06:26,510
Now this is great for some fields and it's useless for others.

100
00:06:26,510 --> 00:06:29,330
For example the name the name doesn't need to be unique.

101
00:06:29,330 --> 00:06:31,090
There are other Andrew Mead's out there.

102
00:06:31,100 --> 00:06:34,650
I'm not that special so I'm not going to put that unique on there.

103
00:06:34,670 --> 00:06:39,740
I want everyone to be able to use whatever name they like email on the other hand is something that

104
00:06:39,740 --> 00:06:46,920
should be unique to each user so we can actually enforce that by using the at Unique directive.

105
00:06:46,940 --> 00:06:47,800
Perfect.

106
00:06:47,810 --> 00:06:51,130
Now we have the user definition that's way more real world.

107
00:06:51,140 --> 00:06:56,210
I'm going to save data model Dohm graph well and I am going to redeploy the application.

108
00:06:56,360 --> 00:06:59,710
Once again it is going to show us all of the changes it made.

109
00:06:59,720 --> 00:07:01,570
And right here there is just one.

110
00:07:01,580 --> 00:07:05,720
It's updated the email field the field has become unique.

111
00:07:05,810 --> 00:07:11,750
Perfect Now that we have the user type definition in place let's go ahead and actually create a user

112
00:07:11,840 --> 00:07:16,680
with an e-mail before we move on and worry about our other types like post and comment.

113
00:07:16,790 --> 00:07:19,370
So I'm going to head over into graft.

114
00:07:19,430 --> 00:07:23,780
Playground we have that sitting right here for the Prisma graph API.

115
00:07:23,960 --> 00:07:25,870
I'm going to refresh that schema.

116
00:07:25,950 --> 00:07:32,590
And over here for create user what I'm going to do is try to create a user with the e-mail that I've

117
00:07:32,620 --> 00:07:38,200
already set up now this should fail because once again this email already exists.

118
00:07:38,200 --> 00:07:41,110
I've already added that user it's sitting right here.

119
00:07:41,230 --> 00:07:43,420
So if I were to rerun this what do I get.

120
00:07:43,450 --> 00:07:44,340
I get an error.

121
00:07:44,500 --> 00:07:47,920
A unique constraint would be violated on user.

122
00:07:47,980 --> 00:07:52,270
And that tells us the exact field that's talking about it's talking about the email field.

123
00:07:52,300 --> 00:07:57,970
So this error tells us that we cannot create a user with this e-mail because it already exists for a

124
00:07:57,970 --> 00:08:01,630
different user and all emails must be unique.

125
00:08:01,630 --> 00:08:02,570
Perfect.

126
00:08:02,590 --> 00:08:06,120
So now we have a way to really structure and manage our users.

127
00:08:06,160 --> 00:08:10,810
Obviously this user could change their email to victim to at example dot com.

128
00:08:10,870 --> 00:08:13,020
And then once again it would work as expected.

129
00:08:13,030 --> 00:08:15,910
As long as they're not exact matches.

130
00:08:15,910 --> 00:08:19,220
The last thing I want to do in this video is set up a nother type.

131
00:08:19,300 --> 00:08:23,530
We're going to set up and configure the post type then we'll be all done and we'll move on to the next

132
00:08:23,530 --> 00:08:24,830
video will you.

133
00:08:24,820 --> 00:08:30,010
We'll set up and configure the comment type so pay close attention because you're essentially going

134
00:08:30,010 --> 00:08:32,280
to be doing what I do from here to the end.

135
00:08:32,350 --> 00:08:38,320
In the next video over in the old schema engraft you file we have our post typed down below and to start

136
00:08:38,330 --> 00:08:43,760
we're just going to worry about the fields with scalar types so we have ID title body and published.

137
00:08:43,870 --> 00:08:49,480
We want to bring all four of those over to the brand new files are right here and new type posts like

138
00:08:49,480 --> 00:08:50,200
we had before.

139
00:08:50,200 --> 00:08:55,990
We're going to have idea of the type ID and we will use the unique directive here to make that unique

140
00:08:56,230 --> 00:08:59,080
for IDs you have to use at Unique with Prisma.

141
00:08:59,110 --> 00:09:03,760
Otherwise you'll get an error and then we're going to set up a title that will be a noun and nullable

142
00:09:03,760 --> 00:09:04,400
string.

143
00:09:04,430 --> 00:09:10,190
There's no need to use at unique here that doesn't really make much sense and we have body a non-negligible

144
00:09:10,210 --> 00:09:13,110
string once again not using unique.

145
00:09:13,120 --> 00:09:14,880
And finally we have published.

146
00:09:14,890 --> 00:09:20,260
So we have published and I'm going to have that be a non nullable boolean also.

147
00:09:20,470 --> 00:09:23,110
So these are all the fields with scalar types.

148
00:09:23,110 --> 00:09:26,200
Now we can actually focus on setting up relationships.

149
00:09:26,200 --> 00:09:30,160
I can set up the comments relationship because the comments type doesn't exist.

150
00:09:30,160 --> 00:09:31,950
You'll create that in the next video.

151
00:09:32,110 --> 00:09:35,780
But I can set up the relationship between the post and the user.

152
00:09:35,830 --> 00:09:37,220
So let's get that done.

153
00:09:37,240 --> 00:09:42,730
We're going to be setting up a post's field on user and R.A.F. posts and we're going to be setting up

154
00:09:42,730 --> 00:09:46,370
the author field on the post which has links to a user.

155
00:09:46,370 --> 00:09:52,120
So over here we're going to have the exact same stuff on the user we want posts it is going to be an

156
00:09:52,120 --> 00:09:58,690
array and non indelible array and the elements inside of there will be non nullable posts and then down

157
00:09:58,690 --> 00:09:59,870
below for posts.

158
00:09:59,880 --> 00:10:04,440
We are going to add the author field that a link to a non nullable user.

159
00:10:04,450 --> 00:10:05,380
Excellent.

160
00:10:05,380 --> 00:10:10,720
So now that we have all of this in place we have users set up we have post completely set up and we

161
00:10:10,720 --> 00:10:13,150
have the relationship between them defined.

162
00:10:13,330 --> 00:10:16,920
Now notice we didn't do anything special here to set up that relationship.

163
00:10:16,930 --> 00:10:20,560
We used the exact tools that we already know about.

164
00:10:20,680 --> 00:10:25,600
I'm going to save data model dot graph QOL and we're going to go ahead and deploy our application once

165
00:10:25,660 --> 00:10:27,340
again right here.

166
00:10:27,340 --> 00:10:30,220
We're going to get way more changes that we've gotten in the past.

167
00:10:30,220 --> 00:10:35,860
So if I scroll up real quick we can see exactly what this deployment did for post it first created the

168
00:10:35,860 --> 00:10:40,390
post and then it created all of the fields associated with the post for user.

169
00:10:40,390 --> 00:10:42,730
It just set up that relationship right here.

170
00:10:42,730 --> 00:10:45,010
It created that post field.

171
00:10:45,010 --> 00:10:48,760
Now you'll notice that for a post and for user we have type next.

172
00:10:48,760 --> 00:10:50,230
Each of them down below.

173
00:10:50,230 --> 00:10:56,590
We also have this other thing post to user and this has relationship excuse me relation instead of type

174
00:10:56,920 --> 00:11:04,360
so post to user is automatically generated by Prisma allowing it to set up the necessary tables to create

175
00:11:04,360 --> 00:11:07,690
a relationship between users and post.

176
00:11:07,720 --> 00:11:13,200
Let's see what all of that looks like by grabbing all the new tables over inside of PGE admin.

177
00:11:13,240 --> 00:11:17,760
So over NPG admin I'm going to right click tables for our database.

178
00:11:17,890 --> 00:11:21,550
I'm going to refresh and we're going to see that two new tables have been created.

179
00:11:21,550 --> 00:11:27,310
First up we have as you might have expected the post table the post table contains all of the data for

180
00:11:27,310 --> 00:11:32,260
the individual post but we also have this underscore post to user table.

181
00:11:32,260 --> 00:11:38,980
This was automatically generated and this is where it stores the IDs that link posts to users so we

182
00:11:38,980 --> 00:11:45,190
can say that post with the ID of one is associated with the user of the idea of three by storing those

183
00:11:45,250 --> 00:11:46,810
right inside of here.

184
00:11:46,810 --> 00:11:52,330
Now what I'd like to do is actually test all of this out by creating a new post for this user.

185
00:11:52,340 --> 00:11:57,160
So I'm going to grab this user's I.D. I can just double click the field to bring up the little editor

186
00:11:57,400 --> 00:12:01,480
I'm going to copy it to the clipboard and hit cancel since I don't actually want to change the fields

187
00:12:01,540 --> 00:12:02,290
value.

188
00:12:02,470 --> 00:12:05,410
Then we're going to move over to graft Well playground.

189
00:12:05,560 --> 00:12:10,320
I'm going to refresh that schema and we can explore all of the new stuff available to us.

190
00:12:10,330 --> 00:12:16,030
So right here under queries we have a query for getting multiple posts and a query forgetting individual

191
00:12:16,030 --> 00:12:17,860
posts under mutations.

192
00:12:17,860 --> 00:12:20,460
We have all of the new mutations for our post.

193
00:12:20,500 --> 00:12:23,800
We have create post update posts delete posts and others.

194
00:12:23,800 --> 00:12:28,480
And finally under subscriptions we have one new post subscription.

195
00:12:28,660 --> 00:12:35,120
So just like with user all of these were auto rated for us based solely off this very small what 8 line

196
00:12:35,180 --> 00:12:36,730
type definition.

197
00:12:36,740 --> 00:12:40,130
All right let's go ahead and actually use one of those mutations.

198
00:12:40,130 --> 00:12:42,730
We're going to use create post.

199
00:12:42,800 --> 00:12:45,920
Now this is where things start to get a bit interesting.

200
00:12:45,950 --> 00:12:51,470
We can see that with Create post we get a post back that's expected we get back the new post we create.

201
00:12:51,650 --> 00:12:57,470
But when it comes to the data we can see that yes we have titlebar and published all there as expected.

202
00:12:57,500 --> 00:12:59,060
We also have author though.

203
00:12:59,270 --> 00:13:01,670
So author is where we set up the relationship.

204
00:13:01,670 --> 00:13:05,050
So all posts have to have an author that wrote then.

205
00:13:05,150 --> 00:13:09,520
So we need to set up this relationship when creating a post just like we did before.

206
00:13:09,770 --> 00:13:16,280
But if we actually click this we can see that it results in us either creating a new user when we create

207
00:13:16,280 --> 00:13:20,150
this post or connecting it to an existing user.

208
00:13:20,300 --> 00:13:25,930
So right here what we're going to do is use connect to connect it to an existing user.

209
00:13:25,940 --> 00:13:30,580
Now we can connect it to an existing user by anything that makes that user unique.

210
00:13:30,620 --> 00:13:35,600
So I could create a new post and say I want it to go to the user with the idea of 4 or I could create

211
00:13:35,600 --> 00:13:40,450
a new post and say it belongs to the user with an email of Andrew an example doc.

212
00:13:40,640 --> 00:13:42,460
Anything that makes the user unique.

213
00:13:42,500 --> 00:13:43,560
So not their name.

214
00:13:43,580 --> 00:13:44,900
For example.

215
00:13:44,900 --> 00:13:47,180
Now let's go ahead and actually use all of this.

216
00:13:47,200 --> 00:13:52,520
It can be really tricky to navigate the schema documentation especially when we have to click so far

217
00:13:52,520 --> 00:13:53,870
and we get really nested.

218
00:13:53,990 --> 00:13:58,190
But when you see it in action it's really not going to be that much different from what we're already

219
00:13:58,370 --> 00:13:59,750
comfortable doing.

220
00:13:59,990 --> 00:14:02,780
So it's not that out right here we're going to create a new tab.

221
00:14:02,780 --> 00:14:05,060
This is where we will define our new post.

222
00:14:05,060 --> 00:14:12,150
It is a mutation we will use the Create post mutation that has just been auto generated for us.

223
00:14:12,200 --> 00:14:18,320
We are indeed going to set up arguments as it takes them and we will also set up our selection set for

224
00:14:18,320 --> 00:14:19,570
the newly created post.

225
00:14:19,580 --> 00:14:21,590
I'm going to grab its ID.

226
00:14:21,590 --> 00:14:27,800
I'm going to grab the title and I'm also going to grab the other fields body published and I'll even

227
00:14:27,800 --> 00:14:29,490
grab something from the author.

228
00:14:29,510 --> 00:14:34,550
I'll grab the author's ID and I'll grab the author's name.

229
00:14:34,550 --> 00:14:35,520
Perfect.

230
00:14:35,630 --> 00:14:40,440
Now when it comes to the arguments why do we have to provide We have to provide that one argument data.

231
00:14:40,550 --> 00:14:45,200
This is indeed an object and we're going to start by setting up the things that are required.

232
00:14:45,200 --> 00:14:47,330
We have to provide the title body and published.

233
00:14:47,360 --> 00:14:48,410
Let's start there.

234
00:14:48,410 --> 00:14:52,270
Title equals Prisma post.

235
00:14:52,370 --> 00:14:53,470
Then we have body.

236
00:14:53,470 --> 00:14:54,930
Body can be empty.

237
00:14:55,190 --> 00:14:59,400
And finally we have published published is going to be either true or false.

238
00:14:59,420 --> 00:15:03,780
I'm going to leave this one unpublished so I'll use falls from here.

239
00:15:03,860 --> 00:15:10,120
Once again we have to provide author which we saw over in the schema author itself is an object.

240
00:15:10,130 --> 00:15:17,880
So we're going to set it up as such in here we can now either create or we can connect.

241
00:15:17,930 --> 00:15:25,310
We are going to connect to an existing user by setting up on Connect either the ID or the email field.

242
00:15:25,340 --> 00:15:30,980
I'm going to link by ID since that's what I copy to the clipboard so I'll set up ID right here.

243
00:15:30,980 --> 00:15:33,500
Passing any ID value as a string.

244
00:15:33,620 --> 00:15:34,630
Excellent.

245
00:15:34,670 --> 00:15:36,610
Now all of this might seem like a little much.

246
00:15:36,610 --> 00:15:41,450
It's quite a bit of work to provide author then connect then Id It would be nicer if there is something

247
00:15:41,450 --> 00:15:42,850
like Author ID.

248
00:15:42,890 --> 00:15:49,310
Don't worry about that just yet because we're not actually going to be making almost any graph QOL API

249
00:15:49,310 --> 00:15:52,170
requests from GRATHWOHL playground like this.

250
00:15:52,240 --> 00:15:57,550
We'll be using a tool that makes this a bit easier when it comes to interacting with Prisma from no

251
00:15:57,580 --> 00:15:58,250
J.S..

252
00:15:58,400 --> 00:16:02,470
For now though let's go ahead and run this and make sure it's at least working at a basic level.

253
00:16:02,660 --> 00:16:05,240
If I fire off this operation what do I get.

254
00:16:05,240 --> 00:16:06,050
I have data.

255
00:16:06,260 --> 00:16:09,790
I have create posts and I have everything I asked for about that post.

256
00:16:09,800 --> 00:16:10,690
Abbott's idea.

257
00:16:10,700 --> 00:16:11,680
I have the title.

258
00:16:11,810 --> 00:16:18,260
I have the body I have the published status I have the author's ID and I have the author's name.

259
00:16:18,260 --> 00:16:23,640
Now let's go ahead and explore the data just to get an idea for what this data structure looks like.

260
00:16:23,780 --> 00:16:28,340
Over in PGE admin We are going to crack open that posts tables.

261
00:16:28,340 --> 00:16:30,810
I'm just going to write click it with a view at it.

262
00:16:30,860 --> 00:16:31,460
Data.

263
00:16:31,610 --> 00:16:34,910
I'm going to view all rows and what do I have here.

264
00:16:34,910 --> 00:16:39,460
I'm going to end up having a single row and you can see we have the ID of the title.

265
00:16:39,460 --> 00:16:43,080
We have a body and we have published all as expected.

266
00:16:43,100 --> 00:16:48,420
Now when it comes to linking the two linking the user with the post that happens in post to user.

267
00:16:48,500 --> 00:16:50,540
So let's view that table as well.

268
00:16:50,540 --> 00:16:55,850
I'm going to Right-Click it go to view edit data and view all rows and here we're gonna see that we

269
00:16:55,850 --> 00:16:57,380
just have one record.

270
00:16:57,380 --> 00:16:59,200
We have an ID for this record.

271
00:16:59,240 --> 00:17:01,570
Then we have the A and B values.

272
00:17:01,580 --> 00:17:03,340
This is the post ID.

273
00:17:03,350 --> 00:17:05,040
This is the user ID.

274
00:17:05,090 --> 00:17:07,070
Actually I believe it's the other way around.

275
00:17:07,160 --> 00:17:12,610
Either way by just using these two values it creates a relationship between those two entities.

276
00:17:12,610 --> 00:17:16,160
Between a post and a user.

277
00:17:16,160 --> 00:17:21,010
So at this point I don't expect all of this relational data to make sense with Prisma just yet.

278
00:17:21,170 --> 00:17:25,940
And if you start to explore some of the other mutations you're going to see that things can get pretty

279
00:17:25,940 --> 00:17:27,770
complex pretty quickly.

280
00:17:27,770 --> 00:17:32,240
Don't worry we're going to dive into how all of this works in detail well for an hour just going through

281
00:17:32,240 --> 00:17:37,880
the process of setting up the basic types we need before we can even really play around with how Prisma

282
00:17:37,880 --> 00:17:40,260
functions and why it's useful.

283
00:17:40,490 --> 00:17:42,530
So that's where we're going to stop for this one.

284
00:17:42,530 --> 00:17:48,320
We've set up our user type and we set up the post type in the next video it's going to be up to you

285
00:17:48,320 --> 00:17:51,960
to set up the comment type and that will be a challenge video.

286
00:17:51,980 --> 00:17:54,480
So let's go ahead and jump right in.

