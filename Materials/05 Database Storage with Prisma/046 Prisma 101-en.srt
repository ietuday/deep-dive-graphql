1
00:00:00,180 --> 00:00:00,900
Welcome back.

2
00:00:00,900 --> 00:00:06,330
In this video we're actually going to install and create our very first Prisma project which I am super

3
00:00:06,330 --> 00:00:09,330
excited about now at this point we're all coming back together.

4
00:00:09,330 --> 00:00:15,180
So regardless of your operating system this video is for you at this point you should have your post

5
00:00:15,180 --> 00:00:16,820
gresse database set up.

6
00:00:16,980 --> 00:00:20,740
You should have P.G. admin running and you should have a connection to the database.

7
00:00:20,750 --> 00:00:24,060
And finally you should have installed and started up Daker.

8
00:00:24,140 --> 00:00:26,850
That's what we covered in all three installation videos.

9
00:00:26,850 --> 00:00:27,880
The first one for Mac.

10
00:00:27,900 --> 00:00:30,950
The second one for Windows and the third one for Linux.

11
00:00:31,020 --> 00:00:34,700
If you did not go through those steps you're not going to be able to continue on.

12
00:00:34,800 --> 00:00:40,020
If anything went wrong during those steps just crack open a question in the Q&amp;A and we'll work with

13
00:00:40,020 --> 00:00:42,870
you to get unstuck and back on track.

14
00:00:42,870 --> 00:00:47,340
All right at this point I am going to assume you have everything is set up and to kick things off we're

15
00:00:47,340 --> 00:00:51,670
going to go over to the Prisma Web site what you can find at Prisma dot I.

16
00:00:51,730 --> 00:00:56,760
Oh here you can learn more about how this tool works and all of the features it offers.

17
00:00:56,760 --> 00:00:59,760
They also have a fantastic set of documentation.

18
00:00:59,760 --> 00:01:05,420
It's a combination of guides telling you how to do specific things like deploy Prisma to Digital Ocean

19
00:01:05,430 --> 00:01:12,090
for example in reference docs showing you exactly how various methods and utilities actually work.

20
00:01:12,090 --> 00:01:15,160
Now if we go back there's only one more page here I want to show you.

21
00:01:15,240 --> 00:01:16,910
That is the community page.

22
00:01:17,100 --> 00:01:20,160
The Prisma community has a great slack channel.

23
00:01:20,160 --> 00:01:24,660
It's a great place to talk with others about how to use Prisma you can help others you can get a bit

24
00:01:24,660 --> 00:01:25,670
of help yourself.

25
00:01:25,770 --> 00:01:27,050
It's a nice community.

26
00:01:27,150 --> 00:01:29,140
So let's go ahead and join there as well.

27
00:01:29,160 --> 00:01:31,070
You can just toss your e-mail in there and click.

28
00:01:31,080 --> 00:01:36,300
Join us on slack now don't use that as a place to just pester them for help.

29
00:01:36,300 --> 00:01:41,280
If you have a real problem it's best to try to work through it on your own and improve your understanding.

30
00:01:41,310 --> 00:01:46,380
Though the community is there for help and it's also there for you to help others with what you actually

31
00:01:46,530 --> 00:01:47,100
know.

32
00:01:47,340 --> 00:01:49,130
All right that's it for the Web site.

33
00:01:49,170 --> 00:01:51,760
I just wanted to point you in this direction.

34
00:01:51,840 --> 00:01:53,600
So you know where to go if you want to learn more.

35
00:01:53,610 --> 00:01:59,250
Or if you forget how something works for our purposes what we're going to do is install this and we

36
00:01:59,250 --> 00:02:01,400
install it as an NPM module.

37
00:02:01,560 --> 00:02:07,080
So over in Visual Studio code I'm going to crack open the terminal for the first time in a while I'm

38
00:02:07,080 --> 00:02:09,760
going to use Control-C to shut things down.

39
00:02:09,810 --> 00:02:15,240
And what we're going to do is run NPM install with the G flag.

40
00:02:15,240 --> 00:02:17,750
We're going to be installing this module globally.

41
00:02:18,000 --> 00:02:22,650
It's called As you probably guessed a Prisma and we're going to install the latest version.

42
00:02:22,650 --> 00:02:26,460
So Prisma at one point twelve point zero.

43
00:02:26,550 --> 00:02:27,550
Perfect.

44
00:02:27,550 --> 00:02:32,340
Now we can actually run this installer and it's going to go through the process of getting everything

45
00:02:32,340 --> 00:02:33,890
set up on our machines.

46
00:02:33,900 --> 00:02:36,780
It might take a little while to actually install.

47
00:02:36,780 --> 00:02:42,100
So what I'm going to do here is cut the video and I'll come back once the installation process is finished.

48
00:02:42,210 --> 00:02:44,930
Take a moment to pause the video yourself and just click play.

49
00:02:45,030 --> 00:02:47,170
Once the installation is complete.

50
00:02:47,190 --> 00:02:47,650
All right.

51
00:02:47,660 --> 00:02:48,360
How'd that go.

52
00:02:48,360 --> 00:02:51,680
Hopefully you were able to get everything installed as expected.

53
00:02:51,840 --> 00:02:57,160
I'm going to clear the terminal output and I can test that things were installed correctly by running.

54
00:02:57,180 --> 00:02:59,550
Prisma with the flag.

55
00:02:59,640 --> 00:03:02,420
This is going to print the version of Prisma installed.

56
00:03:02,460 --> 00:03:03,540
If you do get a version.

57
00:03:03,550 --> 00:03:05,870
Great things have been installed successfully.

58
00:03:06,000 --> 00:03:11,860
If you get an error along the lines of command not found that means things were not installed correctly.

59
00:03:11,880 --> 00:03:17,380
You can just crack open a question in the Q&amp;A and we'll work with you to get unstuck and back on track.

60
00:03:17,550 --> 00:03:23,760
Now from here we're going to be using that Prisma command to initialize a new project and we're actually

61
00:03:23,760 --> 00:03:27,290
going to create a new folder engraft Cuil course.

62
00:03:27,390 --> 00:03:28,830
So we're not ditching everything.

63
00:03:28,830 --> 00:03:32,570
We created engraft UL basic's we're not throwing all of that code away.

64
00:03:32,820 --> 00:03:38,700
All I'd like to do is create a new directory for this phase two of our project I want to leave this

65
00:03:38,700 --> 00:03:42,080
barebones version in place as a reference for the future.

66
00:03:42,240 --> 00:03:43,740
So right here what am I going to do.

67
00:03:43,860 --> 00:03:47,220
I'm going to create a new folder inside of here.

68
00:03:47,220 --> 00:03:51,850
We're going to give a name to this project I'll call it graph Cuil hyphen Prisma.

69
00:03:52,080 --> 00:03:56,080
And now what we're going to do is use C-D to switch into that folder.

70
00:03:56,100 --> 00:04:03,000
So from the terminal C-D dot dot to get out of graph you basics then forward slash graphical haif and

71
00:04:03,010 --> 00:04:06,180
Prisma to get into the new folder we justified.

72
00:04:06,420 --> 00:04:10,890
Once we're in there we're going to be using Prisma in it.

73
00:04:10,890 --> 00:04:17,180
Now Prisma it does take an argument it takes the name for your project and we're going to call our Prisma.

74
00:04:17,310 --> 00:04:19,410
So that's Prisma in it.

75
00:04:19,410 --> 00:04:24,570
Prisma we can actually go ahead and run this and this is going to go through the process of setting

76
00:04:24,570 --> 00:04:25,860
up the project.

77
00:04:25,860 --> 00:04:31,440
Now if we actually crack open graph Q L hyphen Prisma we can see it's created a new folder with the

78
00:04:31,440 --> 00:04:34,220
same name as the project that we just set up.

79
00:04:34,320 --> 00:04:38,220
We passed in that third argument Prisma we have a folder called Prisma.

80
00:04:38,220 --> 00:04:40,530
Currently it has no files inside of there.

81
00:04:40,590 --> 00:04:44,700
And that's because Prisma is asking us some questions about our project.

82
00:04:44,700 --> 00:04:49,860
The first question is whether or not we have an existing database so we can either create a new one

83
00:04:49,920 --> 00:04:51,440
or use an existing one.

84
00:04:51,480 --> 00:04:54,850
We don't want to create a new one because of the way it actually creates it.

85
00:04:54,900 --> 00:04:59,860
We want to use the existing external production ready database that we've already created.

86
00:05:00,030 --> 00:05:05,370
So we're going to use the arrow keys to cycle through the options and pick use existing database.

87
00:05:05,460 --> 00:05:08,130
From there it's going to access the type we are using.

88
00:05:08,190 --> 00:05:14,250
I'm using POST graphs and then the last question for the moment is does our database contain existing

89
00:05:14,250 --> 00:05:15,140
data.

90
00:05:15,150 --> 00:05:19,290
Now there's experimental support for migrations but we don't have data so we can pick.

91
00:05:19,290 --> 00:05:22,350
No we have an empty database from here.

92
00:05:22,350 --> 00:05:24,420
All it needs is our connection information.

93
00:05:24,420 --> 00:05:30,750
So the same information we provided to P G admin I could head over to that Heroku tab once again and

94
00:05:30,750 --> 00:05:31,890
grab those values.

95
00:05:31,890 --> 00:05:33,680
First up is the host value.

96
00:05:33,840 --> 00:05:37,230
I'm going to copy that pasted in and hit enter.

97
00:05:37,230 --> 00:05:38,630
Next up is the port.

98
00:05:38,670 --> 00:05:39,740
The port is.

99
00:05:39,780 --> 00:05:43,710
Excuse me 5 4 3 2 which is indeed the default value.

100
00:05:43,710 --> 00:05:46,760
So I can just hit enter to use the default value.

101
00:05:46,830 --> 00:05:51,020
Next up the database user right here we have our user name.

102
00:05:51,060 --> 00:05:52,550
I'm going to copy that.

103
00:05:52,620 --> 00:05:54,940
I'm going to pace it over and hit enter.

104
00:05:55,080 --> 00:05:57,460
Then we have our database password.

105
00:05:57,510 --> 00:06:03,230
I'm going to grab that copy it and paste it over and then finally we have our database name.

106
00:06:03,230 --> 00:06:05,550
That's right here next to a database.

107
00:06:05,550 --> 00:06:08,000
I'm going to paste that in and hit enter.

108
00:06:08,220 --> 00:06:14,730
The last question is whether or not we want to use S S L external connections for Heroku require SSL

109
00:06:14,760 --> 00:06:15,590
so you have to hit.

110
00:06:15,600 --> 00:06:21,900
Yes here you have to type in uppercase why then we can enter and we can choose a name for our existing

111
00:06:21,900 --> 00:06:22,610
schema.

112
00:06:22,740 --> 00:06:27,460
We're going to call it what we've been calling it before schema dot graph.

113
00:06:27,530 --> 00:06:28,850
Well and there we go.

114
00:06:28,860 --> 00:06:29,720
We're all done.

115
00:06:30,000 --> 00:06:31,840
Now what exactly did that do.

116
00:06:31,950 --> 00:06:33,480
Well it actually did a few things.

117
00:06:33,480 --> 00:06:39,570
First up it created three files in the Prisma directory which we'll be exploring in just a moment.

118
00:06:39,570 --> 00:06:43,110
It also shows us the steps to actually get things set up.

119
00:06:43,110 --> 00:06:48,150
These are steps we're going to take in just a second after we actually go ahead and explore the files

120
00:06:48,240 --> 00:06:49,200
that it created.

121
00:06:49,230 --> 00:06:53,880
What I'd like to take a moment to do is open up all three files and familiarize ourselves with this

122
00:06:53,880 --> 00:06:55,650
little project structure.

123
00:06:55,650 --> 00:06:58,520
We're not going to dive into the details of all three right now.

124
00:06:58,530 --> 00:07:03,480
I just want to get a quick overview though don't worry we will be working with all three extensively

125
00:07:03,480 --> 00:07:07,620
making changes to them as we progress through the course first step.

126
00:07:07,620 --> 00:07:14,960
We have a data model dot graph QOL data model graphed UL is nothing more than a set of type definitions

127
00:07:14,960 --> 00:07:15,500
for graph.

128
00:07:15,510 --> 00:07:18,860
Q Well similar to what we have in schema data.

129
00:07:18,950 --> 00:07:22,630
Well in here we have all of the things that make up our application.

130
00:07:22,670 --> 00:07:27,980
We have users posts and comments and eventually we're going to have something similar in data model

131
00:07:28,040 --> 00:07:29,890
that graphical as well.

132
00:07:29,900 --> 00:07:35,990
The cool thing about this file though is that Prisma uses this when it determines your database structure.

133
00:07:35,990 --> 00:07:41,450
So for us Prisma is going to create a new table for all of our custom object types.

134
00:07:41,450 --> 00:07:46,940
So it's going to create a new table for all of our users and it's going to add columns to each user

135
00:07:47,120 --> 00:07:48,520
ID and name.

136
00:07:48,650 --> 00:07:55,490
So the graphical type definitions end up changing the structure of what our database looks like.

137
00:07:55,490 --> 00:08:00,830
Now if it wasn't for this code right here we would know exactly what the spiled does at Unique is something

138
00:08:00,860 --> 00:08:02,130
we'll talk about later.

139
00:08:02,210 --> 00:08:05,900
We'll talk about exactly what this syntax is and what it's doing for us.

140
00:08:05,900 --> 00:08:10,930
For the moment though we're just going to continue on to the other two files the next file.

141
00:08:10,940 --> 00:08:12,990
I'd like to talk about is Prisma.

142
00:08:13,100 --> 00:08:18,080
Y.M. Well this is a YAML file and YAML is similar to Jason.

143
00:08:18,080 --> 00:08:20,260
It is just a set of key value pairs.

144
00:08:20,270 --> 00:08:24,260
And in the end of the day it's a great language when it comes to configuration.

145
00:08:24,440 --> 00:08:26,670
So we're going to see a bit of YAML in this course.

146
00:08:26,690 --> 00:08:29,390
Essentially we have the key Kolins space.

147
00:08:29,450 --> 00:08:33,100
The value here we have just some default configuration.

148
00:08:33,200 --> 00:08:38,810
We have the end point which we will eventually be able to use to access our instance and we have a link

149
00:08:38,810 --> 00:08:41,500
to the data model we want to use for the database here.

150
00:08:41,630 --> 00:08:45,830
It's just data model linking to the file that we just explored.

151
00:08:45,830 --> 00:08:51,530
Now there's only one more file but it's by far the most complex that is docker compose.

152
00:08:51,540 --> 00:08:52,900
Dot why now.

153
00:08:53,150 --> 00:08:57,120
This is the file that's actually going to start up the docker container.

154
00:08:57,260 --> 00:09:00,640
And you'll notice it contains some of our personal details down below.

155
00:09:00,740 --> 00:09:04,280
We have all of the connection information for our database.

156
00:09:04,370 --> 00:09:05,990
Let's briefly go over this file.

157
00:09:05,990 --> 00:09:08,890
First up we have the version for the or composed file.

158
00:09:08,890 --> 00:09:11,200
You can think of this kind of like your TNL document.

159
00:09:11,200 --> 00:09:13,280
It describes the version you want to use.

160
00:09:13,280 --> 00:09:16,480
In this case we are using the syntax for version 3.

161
00:09:16,640 --> 00:09:20,950
So the version allows us to determine what fields we can actually set.

162
00:09:20,960 --> 00:09:25,130
Next up we have services and we just have a single service Prisma.

163
00:09:25,220 --> 00:09:30,740
Now for Yamhill you can think of this kind of like a property whose value is an object and on that object

164
00:09:30,770 --> 00:09:32,660
we have a property Prisma.

165
00:09:32,810 --> 00:09:35,600
Now inside of Prisma is where everything interesting lives.

166
00:09:35,600 --> 00:09:37,220
First up we have the image.

167
00:09:37,220 --> 00:09:43,700
So this is the Dakar container that someone else created that we are going to use it specifies the container

168
00:09:43,700 --> 00:09:45,630
name as well as the version here.

169
00:09:45,650 --> 00:09:47,650
One point one too.

170
00:09:47,660 --> 00:09:49,450
Next up we have restart always.

171
00:09:49,450 --> 00:09:54,170
Which just makes sure that the process restarts when we deploy new changes to it.

172
00:09:54,170 --> 00:10:00,450
And we have the ports we're going to use just 4 4 6 6 down below that we have environment.

173
00:10:00,620 --> 00:10:04,910
And this is where we set up our Prisma config to configure how Prisma works.

174
00:10:04,910 --> 00:10:06,400
We have our port once again.

175
00:10:06,470 --> 00:10:11,090
And the other thing we have in here is our database so we just have a single default database and we

176
00:10:11,090 --> 00:10:14,300
have all of the connection details we provided.

177
00:10:14,300 --> 00:10:19,560
Now we do have to make a couple of small changes to this file before we actually deploy.

178
00:10:19,790 --> 00:10:22,840
Right here we're going to remove the schema property.

179
00:10:22,970 --> 00:10:24,170
It's not necessary.

180
00:10:24,170 --> 00:10:30,230
We will actually leave that off and we're going to be adding in a new property as well setting that

181
00:10:30,230 --> 00:10:30,970
to true.

182
00:10:31,160 --> 00:10:36,260
Now if you remember when we went through the little prompts from Prisma in it we did say we wanted to

183
00:10:36,260 --> 00:10:42,460
use SSL for one reason or another though it doesn't actually save that information into the dock or

184
00:10:42,470 --> 00:10:43,890
compose file.

185
00:10:43,910 --> 00:10:45,590
Maybe they'll change that in the future.

186
00:10:45,590 --> 00:10:49,550
So if you see SSL there already there's no need to add it again.

187
00:10:49,670 --> 00:10:51,560
But you do need to make sure it exists.

188
00:10:51,560 --> 00:10:56,390
Otherwise we're not going to be able to connect to the Heroku postgresql database.

189
00:10:56,630 --> 00:10:57,130
All right.

190
00:10:57,140 --> 00:10:59,690
That is it for changes to this file.

191
00:10:59,690 --> 00:11:01,950
Let's go ahead and actually deploy our app.

192
00:11:01,970 --> 00:11:05,670
So what is it telling us to do we have to CD into that new folder.

193
00:11:05,840 --> 00:11:11,600
We have to run one command to start up docker and another command to actually deploy what's in our little

194
00:11:11,660 --> 00:11:13,130
Prisma folder.

195
00:11:13,190 --> 00:11:17,490
So I'm going to use CD Prisma to navigate into that new directory.

196
00:11:17,660 --> 00:11:25,840
Then we're going to use one of maybe two docker commands will ever use Dr hyphen compose up with the

197
00:11:25,850 --> 00:11:26,900
D flag.

198
00:11:26,930 --> 00:11:32,540
Remember that if you are running on aboon do you are going to have to use sudo before all of our docker

199
00:11:32,540 --> 00:11:35,920
commands that includes darker and darker compose.

200
00:11:35,990 --> 00:11:41,270
Let's go ahead and run the command and the first thing it's going to do is grab all of the code necessary

201
00:11:41,270 --> 00:11:48,280
to actually run Prisma then it's going to start on the Prisma application in our little virtual machine.

202
00:11:48,380 --> 00:11:53,100
Now this process is actually not deploying our code in any way whatsoever.

203
00:11:53,120 --> 00:11:58,100
We have to run that separate command in order to actually deploy our changes to the process.

204
00:11:58,100 --> 00:12:01,500
For now though we really just need to sit and wait for it to complete.

205
00:12:01,520 --> 00:12:03,530
It should just take a few moments.

206
00:12:03,560 --> 00:12:04,500
Perfect.

207
00:12:04,610 --> 00:12:10,580
The next thing we're going to do and the last command we're going to run for now is Prisma deploy.

208
00:12:10,760 --> 00:12:16,800
This is actually going to deploy your latest change in so as I make changes to my schema for example

209
00:12:16,860 --> 00:12:23,280
adding new types or changing the fields for types we are going to need to deploy for Prisma to actually

210
00:12:23,280 --> 00:12:25,290
reflect those in the database.

211
00:12:25,290 --> 00:12:31,290
Right here though we can run it Prisma deploy and this command is known to fail if you run it too quickly

212
00:12:31,290 --> 00:12:34,070
after actually creating that Daker instance.

213
00:12:34,080 --> 00:12:39,300
So if it does fail just go ahead and run it again maybe count to 10 then run it again and you should

214
00:12:39,300 --> 00:12:41,150
see what I see here.

215
00:12:41,160 --> 00:12:43,310
Here we can see exactly what it did.

216
00:12:43,380 --> 00:12:45,760
It started by deploying that default service.

217
00:12:45,840 --> 00:12:46,710
And then what did it do.

218
00:12:46,710 --> 00:12:52,090
It went through the process of actually creating everything necessary based off of our schema.

219
00:12:52,110 --> 00:12:56,150
Now in this case we just had a user and we had two fields ID and name.

220
00:12:56,280 --> 00:13:03,000
And that also created two fields for us updated at and created at allowing us to keep track of when

221
00:13:03,210 --> 00:13:08,130
the given record whether it's a user a post or a comment was created and updated.

222
00:13:08,130 --> 00:13:10,910
A super useful thing to be able to do.

223
00:13:11,010 --> 00:13:14,400
Now what can we do when we can actually pull things up in the browser.

224
00:13:14,490 --> 00:13:15,950
Everything is deployed.

225
00:13:15,990 --> 00:13:22,700
We can head over to the browser and go to a local host colon four four six six.

226
00:13:22,880 --> 00:13:25,720
Now if you're on Mac or Linux this should be the correct.

227
00:13:25,730 --> 00:13:26,520
You are Al.

228
00:13:26,570 --> 00:13:33,740
If you're on Windows you need to find the IP address that the docker toolbox spit out so you could open

229
00:13:33,740 --> 00:13:39,210
up that terminal which should be running in the background somewhere there's an IP you want to replace

230
00:13:39,260 --> 00:13:41,010
local host with that IP.

231
00:13:41,030 --> 00:13:45,400
You still want to add the port on to the end if we actually visit as you are l.

232
00:13:45,410 --> 00:13:45,950
What do we get.

233
00:13:45,950 --> 00:13:48,730
We get another instance of graph Al playground.

234
00:13:48,740 --> 00:13:56,780
This time though the graphics playground is connected to the graphics API provided by Prisma itself.

235
00:13:56,810 --> 00:14:02,370
That means if we were to use a mutation it would actually write data to our postgresql database.

236
00:14:02,420 --> 00:14:06,830
If I was to use a query it would be reading data from that database.

237
00:14:06,830 --> 00:14:10,910
Now the nice news is that Prisma does all of the heavy lifting for us.

238
00:14:10,910 --> 00:14:17,540
All we need to do is define in data model the various types and fields we want Prisma goes through the

239
00:14:17,540 --> 00:14:23,690
process of automatically creating the mutations the queries and the subscriptions necessary to get everything

240
00:14:23,690 --> 00:14:26,510
working with the database we've chosen.

241
00:14:26,510 --> 00:14:31,580
Now if we actually go back over to the browser we can open up the schema and we can see there are plenty

242
00:14:31,580 --> 00:14:36,650
of queries mutations and subscriptions that we had no part in creating.

243
00:14:36,650 --> 00:14:41,490
We have users for fetching users we have user prefetching an individual user.

244
00:14:41,630 --> 00:14:44,840
We have create user update user and delete user.

245
00:14:44,960 --> 00:14:49,390
And we even have subscriptions allowing us to watch user data for changes.

246
00:14:49,430 --> 00:14:52,240
They noticed that everything here is related to user.

247
00:14:52,340 --> 00:14:58,220
And that's because it's the only type we defined as we define more types Prisma is automatically going

248
00:14:58,220 --> 00:15:04,610
to generate other queries mutations and subscriptions allowing us to easily work with those types.

249
00:15:04,610 --> 00:15:08,680
Now in this video we're not actually going to perform any operations just yet.

250
00:15:08,790 --> 00:15:11,020
That's going to be the topic of the next one.

251
00:15:11,120 --> 00:15:12,800
That's where we're going to stop for this one.

252
00:15:12,800 --> 00:15:14,880
So let's take a quick moment to recap.

253
00:15:14,900 --> 00:15:20,120
Aside from installing Prisma what we really did in this video is we created a new Prisma project and

254
00:15:20,120 --> 00:15:22,610
we deployed our first Prisma project.

255
00:15:22,700 --> 00:15:27,860
We created the new Prisma project using Prisma in it and then asked us to a bunch of questions about

256
00:15:27,860 --> 00:15:31,790
our project and it allowed it to automatically generate these three files.

257
00:15:31,790 --> 00:15:34,830
Data Model Prisma and Dakar compose.

258
00:15:35,000 --> 00:15:38,900
Now it's important to note that I could have generated these three files on my own.

259
00:15:38,900 --> 00:15:43,820
The only reason we use the little wizard is because it makes it way easier to get up and running with

260
00:15:43,820 --> 00:15:44,660
Prisma.

261
00:15:44,660 --> 00:15:48,590
In the end of the day I could have typed out every single character and gotten the same result.

262
00:15:48,590 --> 00:15:52,490
That's just way more tedious and quite frankly way more error prone.

263
00:15:52,640 --> 00:15:56,630
So it's always a good idea to use Prisma in it when you're getting started.

264
00:15:56,630 --> 00:16:02,500
Now all of the real work was done when we used the docker compose command to start up the Prisma service

265
00:16:02,750 --> 00:16:07,910
and then Prisma deploy to actually deploy our data model to that service.

266
00:16:07,920 --> 00:16:12,690
The end result was that we can see well play ground over in the browser.

267
00:16:12,710 --> 00:16:17,540
Now this is great because in the very next video we're going to use graph Q playground to interact with

268
00:16:17,540 --> 00:16:18,520
our database.

269
00:16:18,530 --> 00:16:23,750
Then after that video we're going to start using it inside of node j ass so we can actually read and

270
00:16:23,750 --> 00:16:26,600
write to the database from our project itself.

271
00:16:26,750 --> 00:16:29,170
I'm excited to continue on talking about Prisma.

272
00:16:29,210 --> 00:16:34,430
So let's go ahead and jump into the next video and take a look at all of the queries mutations and subscriptions

273
00:16:34,610 --> 00:16:36,370
that are provided to us.

