1
00:00:00,180 --> 00:00:05,700
Hey this is Andrew with a bonus video showing you how you can allow users to update their passwords

2
00:00:05,700 --> 00:00:10,530
so right now when an account is created you can indeed create it with a password.

3
00:00:10,530 --> 00:00:13,290
You actually have to create it with a password.

4
00:00:13,290 --> 00:00:18,420
The problem though is that when you go to update a user you actually can't update their password.

5
00:00:18,450 --> 00:00:20,710
We're going to address that in this video.

6
00:00:20,940 --> 00:00:26,340
To kick things off let's simplify the files we're using I'm going to close all open editors and we are

7
00:00:26,340 --> 00:00:28,650
going to open mutation Dhananjay.

8
00:00:28,710 --> 00:00:29,360
Yes.

9
00:00:29,460 --> 00:00:32,310
And I'm also going to open schema dot graft.

10
00:00:32,430 --> 00:00:38,720
Well the first thing we need to do is update the arguments that update user accepts.

11
00:00:38,730 --> 00:00:44,390
Now we have update user input which is defined down below that is the type for data.

12
00:00:44,580 --> 00:00:49,110
And if I scroll down to that and we can see that when we're updating a user we can choose to provide

13
00:00:49,110 --> 00:00:52,230
the name or the email both being optional.

14
00:00:52,260 --> 00:00:57,410
We're also going to add on password leaving that as an optional string as well.

15
00:00:57,570 --> 00:01:01,190
So when you're updating a user you could update the password or maybe you don't.

16
00:01:01,230 --> 00:01:03,220
That's fine as well.

17
00:01:03,360 --> 00:01:07,490
And that's actually the only change we have to make in schema Dom graphics.

18
00:01:07,530 --> 00:01:15,360
Well we can save this file close it down and from here what we need to do is modify update user down

19
00:01:15,360 --> 00:01:16,350
below.

20
00:01:16,350 --> 00:01:19,080
Update user currently would technically work.

21
00:01:19,080 --> 00:01:22,760
The problem though is that we're not hashing the password.

22
00:01:22,860 --> 00:01:28,950
We want to make sure that we validate and hash the password just like we were doing when a user signs

23
00:01:29,040 --> 00:01:29,740
up.

24
00:01:29,850 --> 00:01:33,050
Now in the end of the day we're going to have a very similar code.

25
00:01:33,240 --> 00:01:39,570
So to avoid duplicating a bunch of code we are going to create a utility function that's responsible

26
00:01:39,600 --> 00:01:42,410
for validating and hashing our password.

27
00:01:42,450 --> 00:01:44,710
We can then use it anywhere we need to do that.

28
00:01:44,760 --> 00:01:50,070
To kick things off we're going to create a brand new file in the utils directory we can call this something

29
00:01:50,100 --> 00:01:53,070
like hash password hash password.

30
00:01:53,130 --> 00:01:53,860
Jay ass.

31
00:01:53,980 --> 00:01:58,920
And as the name suggests we're going to end up creating an export porting a function that validates

32
00:01:58,920 --> 00:02:01,710
the passwords length and then returns the hash.

33
00:02:01,710 --> 00:02:08,090
So right here Konst hash password and we'll talk about the arguments and the function body in just a

34
00:02:08,090 --> 00:02:08,710
second.

35
00:02:08,840 --> 00:02:10,520
And we're going to do is export it.

36
00:02:10,550 --> 00:02:15,830
So export hash password as the default export.

37
00:02:15,870 --> 00:02:16,920
Perfect.

38
00:02:16,920 --> 00:02:21,810
Now that we have this in place we can start to incorporate the actual functionality in the end of the

39
00:02:21,810 --> 00:02:27,210
day we are going to need to import B script since we are going to be hashing the password in this file

40
00:02:27,510 --> 00:02:38,060
so I can import the script from a B script J s exactly like we did in our other file in mutation.

41
00:02:38,080 --> 00:02:39,800
J.S. Right here.

42
00:02:39,820 --> 00:02:46,150
Now this function is going to take a single argument to the plain text password that should be validated

43
00:02:46,420 --> 00:02:52,750
and hashed and what we do next is actually going to be really similar to what we do over here already.

44
00:02:53,020 --> 00:02:58,470
These five lines are responsible for validating that length and then hashing the password.

45
00:02:58,460 --> 00:03:05,770
We are going to copy them exactly bring them over to our hash password function and paste them in.

46
00:03:05,770 --> 00:03:11,650
The only thing we're going to do is make a couple small tweaks instead of args dot data dot password.

47
00:03:11,740 --> 00:03:17,320
We have access to password directly via the function argument then down below.

48
00:03:17,410 --> 00:03:22,230
Instead of assigning the hashed password to a variable we're just going to return it.

49
00:03:22,390 --> 00:03:29,540
So right here I am going to return whatever comes back from calling B crypt dot hash which is a promise.

50
00:03:29,710 --> 00:03:34,720
And instead of passing in args data dot password we're just going to pass in.

51
00:03:34,840 --> 00:03:36,600
Password perfect.

52
00:03:36,610 --> 00:03:40,480
So now we have a modified version of that code.

53
00:03:40,510 --> 00:03:47,290
We have a reusable hash password function which still validates the length and still actually returns

54
00:03:47,290 --> 00:03:48,700
the hashed password.

55
00:03:48,700 --> 00:03:52,620
Now we can save this file and use it over in mutation.

56
00:03:52,650 --> 00:03:58,570
J.S. we're going to use it right here for create user and we're also going to use it down below.

57
00:03:58,570 --> 00:04:02,670
When updating a user's password Let's go ahead and start by importing it.

58
00:04:02,680 --> 00:04:05,120
So inport hash password.

59
00:04:05,130 --> 00:04:07,360
From the file we just created.

60
00:04:07,360 --> 00:04:14,680
That's dot dot forward slash you tills forward slash hash password and once we have that imported we

61
00:04:14,680 --> 00:04:15,540
can use it.

62
00:04:15,730 --> 00:04:22,240
So right here we do indeed still need to validate and hash that password and I'm going to go ahead and

63
00:04:22,240 --> 00:04:29,050
get that done by first deleting our if statement which checks its length and then changing what we await

64
00:04:29,410 --> 00:04:36,910
instead of a waiting B script dot hash we are going to await a call to hash password.

65
00:04:37,060 --> 00:04:44,600
And we are going to pass in what the plain text password which we just had access to via args Daten

66
00:04:44,620 --> 00:04:46,480
data password.

67
00:04:46,630 --> 00:04:47,510
Perfect.

68
00:04:47,710 --> 00:04:52,300
Now that we have this in place create user is doing exactly what it did before.

69
00:04:52,330 --> 00:04:58,540
We haven't changed as functionality but we have refactored it to be able to use the validation and hashing

70
00:04:58,630 --> 00:04:59,600
functionality.

71
00:04:59,650 --> 00:05:02,040
And that's exactly what we're going to do down below.

72
00:05:02,260 --> 00:05:09,460
So for update user the first thing we want to do is see if the user is indeed updating their password.

73
00:05:09,460 --> 00:05:14,300
There's no need to validate it and hash it if no password was provided to be changed.

74
00:05:14,380 --> 00:05:16,470
We can knock that out with an if statement.

75
00:05:16,510 --> 00:05:23,110
I'm going to perform a simple type check using type of we're going to look at args dot data dot password

76
00:05:23,290 --> 00:05:25,020
and we're going to check if it is a string.

77
00:05:25,030 --> 00:05:27,430
So right here is it a string.

78
00:05:27,430 --> 00:05:28,850
If it is that's great.

79
00:05:28,870 --> 00:05:30,310
We're going to hash out a password.

80
00:05:30,310 --> 00:05:31,680
If it's not that's fine too.

81
00:05:31,690 --> 00:05:38,950
We're not going to hash anything and right here all we do is a sign a new value for args dot data dot

82
00:05:38,950 --> 00:05:45,880
password we're going to get the new value by awaiting a nother call to the hash password function we

83
00:05:45,880 --> 00:05:46,580
created.

84
00:05:46,690 --> 00:05:53,250
And we are going to pass in that plain text password which once again is args dot data dot password.

85
00:05:53,260 --> 00:05:54,250
So what did we do.

86
00:05:54,250 --> 00:05:58,110
We checked if the password is a string if it is we hash it.

87
00:05:58,150 --> 00:06:02,400
And then down below that is what gets saved when the user is updated.

88
00:06:02,410 --> 00:06:03,350
And there we go.

89
00:06:03,370 --> 00:06:07,000
We now have a system for updating the user's password.

90
00:06:07,000 --> 00:06:12,640
And the last thing we're going to do is verify that it actually works over inside of graft UL playground.

91
00:06:12,640 --> 00:06:17,740
Let's go ahead and create a brand new user from scratch so we're going to make sure that we can create

92
00:06:17,740 --> 00:06:22,540
a user and log in then we can update a user's password and still log in.

93
00:06:22,750 --> 00:06:25,690
So over here instead of Gen. we're going to go ahead and sign up.

94
00:06:25,690 --> 00:06:32,170
Sarah I will keep her password the same but I will change her email to Sarah at example dot com.

95
00:06:32,170 --> 00:06:33,490
I'm going to fire that off.

96
00:06:33,490 --> 00:06:34,780
And what do I get back.

97
00:06:34,810 --> 00:06:37,470
I get back some data that looks correct from here.

98
00:06:37,480 --> 00:06:41,880
We're going to fire off a separate log in request to make sure that still works.

99
00:06:41,890 --> 00:06:47,770
Given the fact that we changed how users get created we use that reusable hash password function.

100
00:06:48,070 --> 00:06:53,580
So if I go over to log in I should be able to swap out just for Sarah.

101
00:06:53,620 --> 00:06:57,010
Fire that off and I do indeed get a token back which is great.

102
00:06:57,010 --> 00:07:00,400
I can still log in with the user that was created.

103
00:07:00,460 --> 00:07:05,670
I'm going to grab their token and we're going to move over to update user and give that a try.

104
00:07:05,680 --> 00:07:07,930
So I have update user over here.

105
00:07:07,930 --> 00:07:12,630
I'm going to swap out the old auth token with the new one for Sarah.

106
00:07:12,730 --> 00:07:18,700
And currently we're just changing the user's name instead of changing the user's name.

107
00:07:18,700 --> 00:07:22,170
We're going to go ahead and change the user's password.

108
00:07:22,180 --> 00:07:28,510
So right here I'm going to go ahead and set password equal to something brand new.

109
00:07:28,630 --> 00:07:38,420
I'm going to use ABC 0 9 8 7 6 and if I actually fire that off what happens I can indeed see Sarah's

110
00:07:38,510 --> 00:07:42,890
data returning now not getting the password back and that's a good thing.

111
00:07:42,980 --> 00:07:49,640
I should not be able to view the password from the database under any circumstances even if attached.

112
00:07:49,640 --> 00:07:50,970
Now where do we go from here.

113
00:07:51,050 --> 00:07:55,210
Well we have to make sure we can still log in with this password.

114
00:07:55,310 --> 00:07:58,080
So I'm going to head back over to the loggin request.

115
00:07:58,100 --> 00:08:03,020
After copying the new password to the clipboard I'm going to paste it in.

116
00:08:03,020 --> 00:08:03,980
I'm going to fire it off.

117
00:08:03,980 --> 00:08:05,070
And what do I get.

118
00:08:05,070 --> 00:08:08,680
All right here I was still able to log in.

119
00:08:08,690 --> 00:08:09,460
So there we have it.

120
00:08:09,470 --> 00:08:15,090
We now have a reusable way to validate and hash passwords and it's working really well for us.

121
00:08:15,110 --> 00:08:21,830
We were able to update a user's password via update user and we were still able to successfully create

122
00:08:21,890 --> 00:08:27,370
users using the create user mutation which is now taking advantage of this new function.

123
00:08:27,560 --> 00:08:29,540
That's where we're going to stop for this one.

124
00:08:29,540 --> 00:08:32,150
Thanks for working with me through this update.

125
00:08:32,150 --> 00:08:33,130
That's it for now.

126
00:08:33,140 --> 00:08:34,610
I'll see you in the next one.

