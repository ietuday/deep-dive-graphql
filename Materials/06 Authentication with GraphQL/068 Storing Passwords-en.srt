1
00:00:00,210 --> 00:00:04,860
In this video as promised we're going to be modifying the create user mutation.

2
00:00:04,860 --> 00:00:09,210
We're going to set this up to actually take a password in and we're going to be doing a few things with

3
00:00:09,210 --> 00:00:10,220
that password.

4
00:00:10,380 --> 00:00:13,740
So let's create a rough outline of what we're going to try to accomplish.

5
00:00:13,740 --> 00:00:21,210
We are going to take in password then we are going to validate the password so we can validate that

6
00:00:21,210 --> 00:00:26,470
it is of a certain length then we're going to hash the passwords since we don't want to store plain

7
00:00:26,470 --> 00:00:27,890
text passwords.

8
00:00:27,900 --> 00:00:32,150
And finally we will generate an off token.

9
00:00:32,310 --> 00:00:37,350
So when all is said and done we're going to generate and send back an art token that can be used to

10
00:00:37,350 --> 00:00:40,420
perform tasks that usually require authentication.

11
00:00:40,590 --> 00:00:47,460
We're going to generate and send back an auth token with the sign up operation and with the log in operation

12
00:00:47,460 --> 00:00:49,820
which we'll get to later in this section.

13
00:00:49,860 --> 00:00:52,400
For now though let's go ahead and start with what we need to do.

14
00:00:52,410 --> 00:00:56,450
These four steps First up we've got to take in that password.

15
00:00:56,550 --> 00:01:03,720
If I had overed to schema that graphic Well we have our create user mutation right here the data comes

16
00:01:03,720 --> 00:01:06,980
from create user input that's defined down below.

17
00:01:07,080 --> 00:01:10,470
And if we scroll down Currently it is not accepting a password.

18
00:01:10,530 --> 00:01:15,410
We are going to add that field on password making it non nullable.

19
00:01:15,570 --> 00:01:16,520
Excellent.

20
00:01:16,540 --> 00:01:23,220
Now whatever someone tries to run or create user mutation they're going to have to provide that password.

21
00:01:23,220 --> 00:01:25,170
So step one is done.

22
00:01:25,350 --> 00:01:27,660
Step 2 we want to validate that password.

23
00:01:27,660 --> 00:01:31,160
Now in this case we're just going to validate its length.

24
00:01:31,200 --> 00:01:36,420
I'm going to make sure it is at least eight characters long and to do that we're going to use an IF

25
00:01:36,420 --> 00:01:37,050
statement.

26
00:01:37,050 --> 00:01:40,810
We have our stateman with our condition and our code to run.

27
00:01:40,830 --> 00:01:42,570
Now we're going to have this code run.

28
00:01:42,600 --> 00:01:47,250
If the password is invalid and in here we're going to throw an error.

29
00:01:47,250 --> 00:01:51,290
So let's set up the condition we want to look at the passwords length.

30
00:01:51,330 --> 00:01:53,850
We have data on args dot data.

31
00:01:53,880 --> 00:01:58,410
There we have the password field which we literally just set up support for.

32
00:01:58,410 --> 00:02:04,590
We know this is a string since we set up that type in our type definition and all we're going to end

33
00:02:04,590 --> 00:02:08,260
up doing is checking its length using the string length property.

34
00:02:08,490 --> 00:02:14,190
If the length is less than 8 we're going to throw an error if it's 8 or greater or not I'm going to

35
00:02:14,190 --> 00:02:15,160
throw an error.

36
00:02:15,170 --> 00:02:26,520
So right here throw new error printing a message password must be 8 characters or longer.

37
00:02:26,640 --> 00:02:27,470
Excellent.

38
00:02:27,630 --> 00:02:31,590
So now we have steps 1 in steps to complete.

39
00:02:31,620 --> 00:02:34,530
That brings us on to hashing the password.

40
00:02:34,530 --> 00:02:38,840
Remember that it's a terrible idea to store plain text passwords in the database.

41
00:02:38,850 --> 00:02:44,070
So we are going to be passing all of the plain text passwords through a hashing algorithm.

42
00:02:44,070 --> 00:02:46,990
There are a lot of hashing algorithms out there as well.

43
00:02:47,010 --> 00:02:49,800
Some are pretty insecure and shouldn't be used.

44
00:02:49,800 --> 00:02:53,450
Others are sick here and are great for production use.

45
00:02:53,460 --> 00:02:58,420
We're going to be using the very popular very secure big crypt algorithm.

46
00:02:58,530 --> 00:03:03,600
Now in the end of the day we're really just going to be installing an NPM module and taking advantage

47
00:03:03,630 --> 00:03:04,790
of a couple of methods.

48
00:03:04,800 --> 00:03:06,140
It provides us.

49
00:03:06,240 --> 00:03:09,480
So let's go ahead and get things set up over inside of the browser.

50
00:03:09,480 --> 00:03:12,060
I'm going to pull up the documentation for this module.

51
00:03:12,060 --> 00:03:15,730
We're about to install and use it is called script.

52
00:03:15,760 --> 00:03:17,690
Jay asks if we google that.

53
00:03:17,850 --> 00:03:22,200
The first result should be the NPM package page we can head over there.

54
00:03:22,200 --> 00:03:26,980
This is the exact module we're going to be installing and it is a very popular one.

55
00:03:27,030 --> 00:03:33,450
We've got about a quarter million weekly downloads now on this page you can learn exactly how this algorithm

56
00:03:33,450 --> 00:03:35,910
works though we're going to cover that in the video.

57
00:03:36,000 --> 00:03:39,610
All I want to do for the moment is actually get this install.

58
00:03:39,830 --> 00:03:43,510
So over here inside of the terminal we're going to do two things.

59
00:03:43,530 --> 00:03:50,130
First up I am going to uninstall you you I.D. which we're no longer using then I am going to install

60
00:03:50,180 --> 00:03:50,950
be crip.

61
00:03:51,380 --> 00:03:59,570
So right here NPM uninstall you you ID we can remove that module since it's no longer being used.

62
00:03:59,580 --> 00:04:03,020
And we can also remove the import statement from up above.

63
00:04:03,200 --> 00:04:09,410
Then once that uninstall command is finished which it now is we will install crypt J as.

64
00:04:09,420 --> 00:04:17,110
So NPM install B crypt J S at the latest version which is two point four point three.

65
00:04:17,130 --> 00:04:18,050
Perfect.

66
00:04:18,060 --> 00:04:23,100
Let's go ahead and get this installed then we'll set up an import statement and we'll take advantage

67
00:04:23,130 --> 00:04:27,020
of one of its methods down below in create user.

68
00:04:27,030 --> 00:04:29,410
Right here we can set up that inport statement.

69
00:04:29,430 --> 00:04:32,070
We're going to be grabbing one of the default exports.

70
00:04:32,080 --> 00:04:35,220
So inport I'm going to call this big crypt.

71
00:04:35,220 --> 00:04:37,500
You could call it B crypt J S as well.

72
00:04:37,500 --> 00:04:38,830
Either way works.

73
00:04:38,910 --> 00:04:41,980
And we're going to grab that film the module that we just installed.

74
00:04:42,050 --> 00:04:43,160
Crypt J.

75
00:04:43,770 --> 00:04:44,820
Excellent.

76
00:04:44,820 --> 00:04:51,090
Now down below in order to actually hash this password we're going to be using a single method from

77
00:04:51,160 --> 00:04:54,970
the crypt that is B crypt dat hash.

78
00:04:55,050 --> 00:05:02,220
This is going to take in our plain text password and it is going to give us back the hashed version.

79
00:05:02,250 --> 00:05:07,590
Now in the end of the day the hashing algorithm is going to take our plain text password in let's say

80
00:05:07,590 --> 00:05:15,100
it is password 1 2 3 a terrible password and it is going to spit out a long random series of characters.

81
00:05:15,180 --> 00:05:17,810
Let's say for this example it has the following characters.

82
00:05:17,820 --> 00:05:20,940
It's not let's just say it is the hashed value.

83
00:05:20,940 --> 00:05:26,280
What we have here this is the value that we're actually going to store in the database.

84
00:05:26,280 --> 00:05:29,090
We're never going to store the plain text version.

85
00:05:29,130 --> 00:05:31,790
We are going to store the hashed version.

86
00:05:31,860 --> 00:05:36,720
So we're going to store what comes back from calling B script dot hash.

87
00:05:36,720 --> 00:05:42,780
Now hashing algorithms are one way which means that we can take a plain text password and hash it but

88
00:05:42,780 --> 00:05:47,330
we cannot take the hashed version and get the plain text version back.

89
00:05:47,340 --> 00:05:48,490
And that's a good thing.

90
00:05:48,720 --> 00:05:54,270
Now if you're wondering how we're ever going to verify a password We'll talk about all of that and more

91
00:05:54,390 --> 00:06:01,020
when we actually implement a log in mutation operation allowing people to log in with their existing

92
00:06:01,020 --> 00:06:02,070
email and password.

93
00:06:02,070 --> 00:06:05,340
For now we're just concerned about generating that hash.

94
00:06:05,460 --> 00:06:07,270
So let's go ahead and get to it.

95
00:06:07,290 --> 00:06:10,830
We're going to call this method with the two arguments that it expects.

96
00:06:10,830 --> 00:06:17,900
The first argument is the plain text password that is available at Ark's dot data dot password.

97
00:06:18,000 --> 00:06:21,620
And the second argument we're going to provide is a salt.

98
00:06:21,630 --> 00:06:24,480
We provide a number the length of the salt.

99
00:06:24,480 --> 00:06:25,600
We want to use.

100
00:06:25,650 --> 00:06:28,440
I'm going to go ahead and use the number ten.

101
00:06:28,470 --> 00:06:29,300
Perfect.

102
00:06:29,310 --> 00:06:34,590
Now if you're wondering what a salt is a salt is nothing more than a random series of characters that

103
00:06:34,590 --> 00:06:37,400
are hashed along with the string you're hashing.

104
00:06:37,560 --> 00:06:43,320
So right now if I were to hash password one two three twice without a salt I would get the same value

105
00:06:43,320 --> 00:06:45,590
both times and this is not ideal.

106
00:06:45,600 --> 00:06:52,060
This is less secure since we now know that anytime we see this value the password is password 1 2 3.

107
00:06:52,080 --> 00:06:53,360
That's a problem.

108
00:06:53,430 --> 00:06:59,060
In order to create truly random hashes even if we have the same input we use a salt.

109
00:06:59,160 --> 00:07:05,670
A lot of hashing algorithms the less secure ones don't have Salt's built in be crypt Dud's you actually

110
00:07:05,670 --> 00:07:07,450
can't use B crypt without a cell.

111
00:07:07,470 --> 00:07:10,590
And that's a good thing and makes it way more secure.

112
00:07:10,590 --> 00:07:11,600
Now what do we do here.

113
00:07:11,610 --> 00:07:13,720
Well hash returns a promise.

114
00:07:13,770 --> 00:07:18,870
That promise resolves with the hashed Valley which is nothing more than a string.

115
00:07:18,930 --> 00:07:25,200
So we're going to go wait that and store the hashed value in a variable Konst password would get the

116
00:07:25,200 --> 00:07:26,470
job done.

117
00:07:26,490 --> 00:07:28,610
I'm going to set that equal to.

118
00:07:28,620 --> 00:07:33,290
And we are going to await whatever comes back from the hash method.

119
00:07:33,300 --> 00:07:38,880
So now we have our hashed password and we can actually go ahead and make sure it gets stored in the

120
00:07:38,880 --> 00:07:44,460
database which means that we're going to need to make a change to our create user mutation called down

121
00:07:44,460 --> 00:07:45,150
below.

122
00:07:45,330 --> 00:07:50,980
Currently we are just passing in our exact data which is where the plain text password lives.

123
00:07:51,000 --> 00:07:51,770
That's a problem.

124
00:07:51,810 --> 00:07:53,880
And we're going to address it to start.

125
00:07:53,880 --> 00:07:58,950
Let's go ahead and add some new lines for this object since we're going to be making the object a bit

126
00:07:58,950 --> 00:08:00,200
more complex.

127
00:08:00,300 --> 00:08:06,360
So I'm going to structure things like I have now and we're going to set data not equal to args dot data

128
00:08:06,870 --> 00:08:08,990
but equal to right here.

129
00:08:09,000 --> 00:08:10,310
A new object.

130
00:08:10,410 --> 00:08:13,800
Now on this object what we're going to do is two things first.

131
00:08:14,040 --> 00:08:19,440
We're going to use our spread operator to spread out all of the properties on our X-Com data.

132
00:08:19,590 --> 00:08:24,960
So we still want to use things like the name and the email which are passed in as arguments then and

133
00:08:24,990 --> 00:08:29,550
we're going to set up the password to be the hashed password from above.

134
00:08:29,550 --> 00:08:34,500
And when you're setting up an object property whose value comes from a variable of the same name we

135
00:08:34,500 --> 00:08:36,370
can always use our shorthand.

136
00:08:36,480 --> 00:08:42,630
Now args dot data is still setting the plain text password on this object but we're overriding it down

137
00:08:42,630 --> 00:08:46,130
below making sure only the hashed version is stored.

138
00:08:46,140 --> 00:08:48,600
So let's go ahead and make sure this actually works.

139
00:08:48,630 --> 00:08:50,220
I'm going to save mutation.

140
00:08:50,250 --> 00:08:50,530
J.

141
00:08:50,530 --> 00:08:55,040
S. And what we're going to do is start up our application and try to create a new user.

142
00:08:55,050 --> 00:09:00,750
So down below that would be NPM start once the application is up and running.

143
00:09:00,840 --> 00:09:05,800
We can move over to local host 4000 to interact with our node API.

144
00:09:06,000 --> 00:09:11,310
Right here I have the create user request and if we give things a refresh we're going to notice that

145
00:09:11,310 --> 00:09:13,530
our current nutation is invalid.

146
00:09:13,620 --> 00:09:18,900
It's invalid because we are not providing a password and password is now required to down below.

147
00:09:18,900 --> 00:09:23,880
We can go ahead and add that on password setting an equal to a string.

148
00:09:23,880 --> 00:09:29,040
Now the nice thing about graph you Al is that it can automatically perform some base level validation

149
00:09:29,040 --> 00:09:29,940
for you.

150
00:09:29,970 --> 00:09:35,370
We can use our exclamation mark to Mark Fields as required and our type definitions make sure we're

151
00:09:35,370 --> 00:09:36,730
getting the correct type.

152
00:09:36,890 --> 00:09:41,420
So if password was set to true this method wouldn't even run.

153
00:09:41,460 --> 00:09:45,510
Now that doesn't mean we don't want to do a little validation even when it's set to a string.

154
00:09:45,510 --> 00:09:46,890
Things can still go wrong.

155
00:09:46,890 --> 00:09:52,770
For example if the password is less than 8 characters I'm going to start with a password of read which

156
00:09:52,800 --> 00:09:54,890
is indeed less than 8 characters.

157
00:09:55,020 --> 00:09:56,850
And if I fire that off what do we get.

158
00:09:56,850 --> 00:09:57,640
We get an error.

159
00:09:57,720 --> 00:10:00,930
Password must be 8 characters or longer.

160
00:10:00,930 --> 00:10:02,460
Let's go ahead and fix that.

161
00:10:02,460 --> 00:10:08,670
I'm going to add incrementing numbers 1 2 3 4 5 bringing the password length to 8.

162
00:10:08,670 --> 00:10:11,730
Now if I go ahead and fire things off what do we get.

163
00:10:11,730 --> 00:10:17,280
We get our operation completing successfully and we can now go ahead and move into the database and

164
00:10:17,280 --> 00:10:23,250
see what value was actually stored for the password field over NPG admin.

165
00:10:23,460 --> 00:10:26,320
I'm going to refreshed that database by clicking that lightning bolt.

166
00:10:26,340 --> 00:10:27,360
And what do we get back.

167
00:10:27,360 --> 00:10:28,740
We get back our user.

168
00:10:28,740 --> 00:10:29,580
Her name is Jess.

169
00:10:29,580 --> 00:10:32,290
Her e-mail is just an example dot com.

170
00:10:32,430 --> 00:10:35,040
And the password is not what we typed in.

171
00:10:35,040 --> 00:10:40,410
It is a long long long series of random characters.

172
00:10:40,410 --> 00:10:42,680
This is the hashed output.

173
00:10:42,690 --> 00:10:46,120
This is what we do want to store in the database.

174
00:10:46,170 --> 00:10:52,770
So now that we have this in place we have successfully completed steps 1 2 and 3.

175
00:10:52,770 --> 00:10:58,920
The only thing left to do is to generate and send back and auth token remember we're going to be creating

176
00:10:58,920 --> 00:11:06,030
an off token when a new user signs up and any time an existing user logs in that's going to be the topic

177
00:11:06,060 --> 00:11:07,290
of the next video.

178
00:11:07,290 --> 00:11:12,810
So on this one we set up create user to take in that password to validate the password and to hash the

179
00:11:12,810 --> 00:11:13,410
password.

180
00:11:13,410 --> 00:11:18,900
That's a great start and the next video will talk about how we're going to generate and manage our authentication

181
00:11:18,900 --> 00:11:19,740
tokens.

182
00:11:19,740 --> 00:11:21,020
I'm excited to get to that.

183
00:11:21,120 --> 00:11:26,560
So let's go ahead and jump right in to the next one where we will finish off our create user mutation.

